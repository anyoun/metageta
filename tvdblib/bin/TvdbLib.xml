<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TvdbLib</name>
    </assembly>
    <members>
        <member name="T:TvdbLib.Data.TvdbEpisode">
            <summary>
            Class representing an episode with all the information that can be retrieved from http://thetvdb.com. <br/> 
            <br/>
            Those are: <br/>
            <![CDATA[
                 <id>332179</id> <br/>
                 <DVD_chapter></DVD_chapter> <br/>
                 <DVD_discid></DVD_discid> <br/>
                 <DVD_episodenumber></DVD_episodenumber> <br/>
                 <DVD_season></DVD_season> <br/>
                 <Director>|Joseph McGinty Nichol|</Director> <br/>
                 <EpisodeName>Chuck Versus the World</EpisodeName> <br/>
                 <EpisodeNumber>1</EpisodeNumber> <br/>
                 <FirstAired>2007-09-24</FirstAired> <br/>
                 <GuestStars>|Julia Ling|Vik Sahay|Mieko Hillman|</GuestStars> <br/>
                 <IMDB_ID></IMDB_ID> <br/>
                 <Language>English</Language> <br/>
                 <Overview>Chuck Bartowski is an average computer geek...</Overview> <br/>
                 <ProductionCode></ProductionCode> <br/>
                 <Rating>9.0</Rating> <br/>
                 <SeasonNumber>1</SeasonNumber> <br/>
                 <Writer>|Josh Schwartz|Chris Fedak|</Writer> <br/>
                 <absolute_number></absolute_number> <br/>
                 <airsafter_season></airsafter_season> <br/>
                 <airsbefore_episode></airsbefore_episode> <br/>
                 <airsbefore_season></airsbefore_season> <br/>
                 <filename>episodes/80348-332179.jpg</filename> <br/>
                 <lastupdated>1201292806</lastupdated> <br/>
                 <seasonid>27985</seasonid> <br/>
                 <seriesid>80348</seriesid> <br/>
            
            ]]>
            Additionally the banner image is stored
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbEpisode.#ctor">
            <summary>
            Default constructor for the TvdbEpisode class
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbEpisode.ToString">
            <summary>
            Returns a short description of the episode (e.g. 1x20 Episodename)
            </summary>
            <returns>short description of the episode</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbEpisode.UpdateEpisodeInfo(TvdbLib.Data.TvdbEpisode)">
            <summary>
            Updates all information of this episode from the given
            episode...
            </summary>
            <param name="_episode">new episode</param>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.AirsBeforeSeason">
            <summary>
            if the episode is a special episode -> Before which season did
            it air
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.AirsBeforeEpisode">
            <summary>
            if the episode is a special episode -> Before which episode did
            it air
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.AirsAfterSeason">
            <summary>
            if the episode is a special episode -> After which season did
            it air
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.IsSpecial">
            <summary>
            Is the episode a special episode
            
            The fields airsafter_season, airsbefore_episode, and airsbefore_season will only be included when the episode is listed as a special. Specials are also listed as being in season 0, so they're easy to identify and sort.
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.DvdSeason">
            <summary>
            Which DVD season is this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.DvdEpisodeNumber">
            <summary>
            The Dvd Episode Number
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.DvdDiscId">
            <summary>
            The DVD Disc Id
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.DvdChapter">
            <summary>
            The chapter of this episode on the dvd
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Id">
            <summary>
            unique tvdb Id of this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.SeriesId">
            <summary>
            Id of series this episode belongs to
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.SeasonId">
            <summary>
            Id of season this episode belong to
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.LastUpdated">
            <summary>
            When was the episode last updated
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.BannerPath">
            <summary>
            Path to the banner image on http://thetvdb.com
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.AbsoluteNumber">
            <summary>
            The absolute number of the episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Writer">
            <summary>
            List of writers for this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.SeasonNumber">
            <summary>
            Season number of this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Rating">
            <summary>
            Rating for this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.ProductionCode">
            <summary>
            Production code for this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Overview">
            <summary>
            Overview of this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Language">
            <summary>
            Language of this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.ImdbId">
            <summary>
            Imdb number of this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.GuestStars">
            <summary>
            List of guest stars that appeared in this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.FirstAired">
            <summary>
            When did the episode air first
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.EpisodeNumber">
            <summary>
            Episode number
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.EpisodeName">
            <summary>
            Name of the episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Directors">
            <summary>
            List of directors for this episode
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.CombinedSeason">
            <summary>
            n/a
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.CombinedEpisodeNumber">
            <summary>
            n/a
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.WriterString">
            <summary>
            Formatted String of writers for this episode in the 
            format | writer1 | writer2 | writer3 |
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.GuestStarsString">
            <summary>
            Formatted String of guest stars that appeared during this episode in the 
            format | gueststar1 | gueststar2 | gueststar3 |
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.DirectorsString">
            <summary>
            Formatted String of directors of this episode in the 
            format | director1 | director2 | director3 |
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbEpisode.Banner">
            <summary>
            The episode image banner
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbEpisode.EpisodeOrdering">
            <summary>
            While one would think that the episode number would be a simple affair there are several different ways that someone might choose to number the episodes on this site episodes are numbered in the order they aired on TV. That being said the site does provide two alternative numbering methods. <br /> <br />
            1. Absolute Episode Order <br />
            2. DVD Release Order <br />
            <br />
            More information on the topic can be found at: http://thetvdb.com/wiki/index.php/Category:Episodes
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbEpisode.EpisodeOrdering.DefaultOrder">
            <summary>
            Default order used by thetvdb
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbEpisode.EpisodeOrdering.DvdOrder">
            <summary>
            As everyone knows series can air on tv in an order completely different than the one intended by the series creator. Firefly being the most often discussed example on this site. Therefore we have provided a method for entering this "Correct" order. See also http://thetvdb.com/wiki/index.php/DVD_Order
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbEpisode.EpisodeOrdering.AbsoluteOrder">
            <summary>
            The standard for this site is the the primary episode number is representative of the shows aired order. But as any Anime fan will tell you Anime episodes are usually numbered without seasons and go from episode 1 to whatever the final episode is, often into the hundreds. Most western broadcasters however do break these shows into seasons, so in order to accommodate this alternate numbering scheme an additional field Absolute Number is available. While this system is primarily intended for Anime series that don't really have seasons, it will work for any program. To use this interface there is no alternate season number only the absolute episode number. Numbering continues on from season to season. So if season 1 ends with 25 then season 2 begins with 26. So for example Bleach is currently in it's "sixth season" but season 5 episode 14 Shock! The Father's True Character is actually episode 111. 
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbLanguage">
            <summary>
            Baseclass for a tvdb language
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbLanguage.DefaultLanguage">
            <summary>
            The default language (which is English)
            Id:           7
            Abbriviation: en
            Name:         English
            
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbLanguage.UniversalLanguage">
            <summary>
            language valid for all available languages
            Id:           7
            Abbriviation: en
            Name:         English
            
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.#ctor">
            <summary>
            TvdbLanguage constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.#ctor(System.Int32,System.String,System.String)">
            <summary>
            TvdbLanguage constructor
            </summary>
            <param name="_id">Id of language</param>
            <param name="_name">Name of language (e.g. English)</param>
            <param name="_abbr">Abbriviation of language (e.g. en)</param>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.ToString">
            <summary>
            Returns String that describes the language in the format "Name (Abbriviation)"
            </summary>
            <returns>String representing this object (e.g. "English (en)")</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.Equals(System.Object)">
            <summary>
            Overrides the equals Method to ensure a valid comparison of two language objects. The
            comparison currently matches abbriviation only.
            </summary>
            <param name="_compare">object to compare with</param>
            <returns>True if the two language objects are the same, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.GetHashCode">
            <summary>
            Returns a hash code of the object
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.op_Equality(TvdbLib.Data.TvdbLanguage,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Overrides the equality operator to ensure a valid comparison of two language objects. The
            comparison currently matches abbriviation only.
            </summary>
            <param name="a">First language object</param>
            <param name="b">Second language object</param>
            <returns>True if the two language objects are the same, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbLanguage.op_Inequality(TvdbLib.Data.TvdbLanguage,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Overrides the inequality operator to ensure a valid comparison of two language objects. The
            comparison currently matches abbriviation only.
            </summary>
            <param name="a">First language object</param>
            <param name="b">Second language object</param>
            <returns>True if the two language objects are the same, false otherwise</returns>
        </member>
        <member name="P:TvdbLib.Data.TvdbLanguage.Id">
            <summary>
            Id of the language
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbLanguage.Abbriviation">
            <summary>
            Abbriviation of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbLanguage.Name">
            <summary>
            Name of the series
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbSeries">
            <summary>
            Series class holds all the info that can be retrieved from http://thetvdb.com.  <br/>
            <br/>
            Those are as follows:<br/>
            <br/>
             - Base information: <br/>
             <code>
               <Series>
                  <id>73739</id>
                  <Actors>|Malcolm David Kelley|Jorge Garcia|Maggie Grace|...|</Actors>
                  <Airs_DayOfWeek>Thursday</Airs_DayOfWeek>
                  <Airs_Time>9:00 PM</Airs_Time>
                  <ContentRating>TV-14</ContentRating>
                  <FirstAired>2004-09-22</FirstAired>
                  <Genre>|Action and Adventure|Drama|Science-Fiction|</Genre>
                  <IMDB_ID>tt0411008</IMDB_ID>
                  <Language>en</Language>
                  <Network>ABC</Network>
                  <Overview>After Oceanic Air flight 815...</Overview>
                  <Rating>8.9</Rating>
                  <Runtime>60</Runtime>
                  <SeriesID>24313</SeriesID>
                  <SeriesName>Lost</SeriesName>
                  <Status>Continuing</Status>
                  <banner>graphical/24313-g2.jpg</banner>
                  <fanart>fanart/original/73739-1.jpg</fanart>
                  <lastupdated>1205694666</lastupdated>
                  <zap2it_id>SH672362</zap2it_id>
               </Series>
             </code>
             - Banner information <br/>
             - Episode information <br/>
             - Extended actor information <br/>
             <br/>
            Each of those can be downloaded seperately. If the information is downloaded as 
            zipped file, everything is downloaded at once
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbSeriesFields">
            <summary>
            This class represents all fields that are available on http://thetvdb.com and
            a list of episodefields. This is used for localised series information.
            
            These are as follows:
                  <id>73739</id>
                  <Actors>|Malcolm David Kelley|Jorge Garcia|Maggie Grace|...|</Actors>
                  <Airs_DayOfWeek>Thursday</Airs_DayOfWeek>
                  <Airs_Time>9:00 PM</Airs_Time>
                  <ContentRating>TV-14</ContentRating>
                  <FirstAired>2004-09-22</FirstAired>
                  <Genre>|Action and Adventure|Drama|Science-Fiction|</Genre>
                  <IMDB_ID>tt0411008</IMDB_ID>
                  <Language>en</Language>
                  <Network>ABC</Network>
                  <Overview>After Oceanic Air flight 815...</Overview>
                  <Rating>8.9</Rating>
                  <Runtime>60</Runtime>
                  <SeriesID>24313</SeriesID>
                  <SeriesName>Lost</SeriesName>
                  <Status>Continuing</Status>
                  <banner>graphical/24313-g2.jpg</banner>
                  <fanart>fanart/original/73739-1.jpg</fanart>
                  <lastupdated>1205694666</lastupdated>
                  <zap2it_id>SH672362</zap2it_id>
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeriesFields.ToString">
            <summary>
            Returns a short description of the episode (e.g. 1x20 Episodename)
            </summary>
            <returns>short description of the episode</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeriesFields.GetEpisodes(System.Int32,TvdbLib.Data.TvdbEpisode.EpisodeOrdering)">
            <summary>
            <para>Gets the episodes for the given season in the given order (aired or dvd). Absolute is also possible but makes no sense since
            there are no seasons with absoulte ordering. Use GetEpisodesAbsoluteOrder() instead.</para>
            
            <para>For more information on episode ordering <see href="http://thetvdb.com/wiki/index.php/Category:Episodes">thetvdb wiki</see></para>
            </summary>
            <returns>List of episodes</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeriesFields.GetEpisodesAbsoluteOrder">
            <summary>
            Returns all episodes in the absolute order
            </summary>
            <returns>List of episodes</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeriesFields.UpdateTvdbFields(TvdbLib.Data.TvdbSeriesFields,System.Boolean)">
            <summary>
            Update all fields of the object with the given information
            </summary>
            <param name="_fields">the fields for the update</param>
            <param name="_replaceEpisodes">Should the episodes be replaced or kept</param>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Episodes">
            <summary>
            List of episodes for this translation
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.EpisodesLoaded">
            <summary>
            Is the episode info loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Id">
            <summary>
            Series Id
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.SeriesName">
            <summary>
            Series Name
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Network">
            <summary>
            Series network
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Language">
            <summary>
            The language of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.ContentRating">
            <summary>
            Content-Rating of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Zap2itId">
            <summary>
            Zap2it Id of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.LastUpdated">
            <summary>
            When was the series updated the last time
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.FanartPath">
            <summary>
            Path to the primary fanart banner
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.BannerPath">
            <summary>
            Path to primary banner
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.PosterPath">
            <summary>
            Path to the primary poster
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Status">
            <summary>
            Status of the show
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.TvDotComId">
            <summary>
            Tv.com id of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Runtime">
            <summary>
            Runtime of the show
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Rating">
            <summary>
            Rating of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Overview">
            <summary>
            Overview of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.ImdbId">
            <summary>
            Imdb Id of the series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Genre">
            <summary>
            List of the series' genres
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.FirstAired">
            <summary>
            The Date the series was first aired
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.AirsTime">
            <summary>
            At which time does the series air
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.AirsDayOfWeek">
            <summary>
            At which day of the week does the series air
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeriesFields.Actors">
            <summary>
            List of actors that appear in this series
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.#ctor">
            <summary>
            Basic constructor for the TvdbSeries class
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.#ctor(TvdbLib.Data.TvdbSeriesFields)">
            <summary>
            Create a series object with all the information contained in the TvdbSeriesFields object
            </summary>
            <param name="_fields"></param>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.AddLanguage(TvdbLib.Data.TvdbSeriesFields)">
            <summary>
            Add a new language to the series
            </summary>
            <param name="_fields"></param>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.SetLanguage(TvdbLib.Data.TvdbLanguage)">
            <summary>
            Set the language of the series to one of the languages that have
            already been loaded
            </summary>
            <param name="_language">The new language for this series</param>
            <returns>true if success, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.SetLanguage(System.String)">
            <summary>
            Set the language of the series to one of the languages that have
            already been loaded
            </summary>
            <param name="_language">The new language abbriviation for this series</param>
            <returns>true if success, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.GetAvailableLanguages">
            <summary>
            Get all languages that have already been loaded for this series
            </summary>
            <returns>List of all translations that are loaded for this series</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.GetEpisodes(System.Int32)">
            <summary>
            Return a list of episodes for the given season
            </summary>
            <param name="_season">Season for which episodes should be returned</param>
            <returns>List of episodes for the given season</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.ToString">
            <summary>
            returns SeriesName (SeriesId)
            </summary>
            <returns>String representing this series</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbSeries.UpdateSeriesInfo(TvdbLib.Data.TvdbSeries)">
            <summary>
            Uptdate the info of the current series with the updated one
            </summary>
            <param name="_series">TvdbSeries object</param>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.SeriesTranslations">
            <summary>
            Get all available Translations
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.IsFavorite">
            <summary>
            Is the series a favorite
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.GenreString">
            <summary>
            Returns the genre string in the format | genre1 | genre2 | genre3 |
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.ActorsString">
            <summary>
            Formatted String of actors that appear during this episode in the 
            format | actor1 | actor2 | actor3 |
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.Banners">
            <summary>
            returns a list of all banners for this series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.BannersLoaded">
            <summary>
            Is the banner info loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.SeriesBanners">
            <summary>
            returns a list of all series banners for this series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.SeasonBanners">
            <summary>
            Returns a list of all season banners for this series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.PosterBanners">
            <summary>
            Returns a list of all season banners for this series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.FanartBanners">
            <summary>
            Returns a list of all fanart banners for this series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.NumSeasons">
            <summary>
            How many Season does the series have
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.TvdbActors">
            <summary>
            List of loaded tvdb actors
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSeries.TvdbActorsLoaded">
            <summary>
            Is the actor info loaded
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbInvalidXmlException">
            <summary>
            Description of TvdbInvalidXmlException.
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbException">
            <summary>
            Base excpetion for tvdblib 
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbException.#ctor(System.String)">
            <summary>
            TvdbException constructor
            </summary>
            <param name="_text">Message</param>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbException.#ctor">
            <summary>
            TvdbException constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbInvalidXmlException.#ctor(System.String)">
            <summary>
            TvdbInvalidXmlException constructor
            </summary>
            <param name="_text">Message</param>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbInvalidXmlException.#ctor">
            <summary>
            TvdbInvalidXmlException constructor
            </summary>
        </member>
        <member name="T:TvdbLib.Xml.TvdbXmlReader">
            <summary>
            Class for parsing the xml info from thetvdb
            </summary>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.#ctor">
            <summary>
            Base constructor for a TvdbXmlReader class
            </summary>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractLanguages(System.String)">
             <summary>
             Extract a list of languages when the data has the format:
             <![CDATA[
            
             <?xml version="1.0" encoding="UTF-8" ?>
             <Languages>
              <Language>
                <name>Español</name>
                <abbreviation>es</abbreviation>
                <id>16</id>
              </Language>
             </Languages>
             
             ]]>
             </summary>
             <param name="_data"></param>
             <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractMirrors(System.String)">
            <summary>
            Extract a list of mirrors if the data has the format:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Mirrors>
             <Mirror>
               <id>1</id>
               <mirrorpath>http://thetvdb.com</mirrorpath>
               <typemask>7</typemask>
             </Mirror>
            </Mirrors>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractSeries(System.String)">
            <summary>
            Extract a list of series in the format:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data>
               <Series>
                  <id>73739</id>
                  <Actors>|Malcolm David Kelley|Jorge Garcia|Maggie Grace|...|</Actors>
                  <Airs_DayOfWeek>Thursday</Airs_DayOfWeek>
                  <Airs_Time>9:00 PM</Airs_Time>
                  <ContentRating>TV-14</ContentRating>
                  <FirstAired>2004-09-22</FirstAired>
                  <Genre>|Action and Adventure|Drama|Science-Fiction|</Genre>
                  <IMDB_ID>tt0411008</IMDB_ID>
                  <Language>en</Language>
                  <Network>ABC</Network>
                  <Overview>After Oceanic Air flight 815...</Overview>
                  <Rating>8.9</Rating>
                  <Runtime>60</Runtime>
                  <SeriesID>24313</SeriesID>
                  <SeriesName>Lost</SeriesName>
                  <Status>Continuing</Status>
                  <banner>graphical/24313-g2.jpg</banner>
                  <fanart>fanart/original/73739-1.jpg</fanart>
                  <lastupdated>1205694666</lastupdated>
                  <zap2it_id>SH672362</zap2it_id>
               </Series>
            </Data>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractSeriesFields(System.String)">
            <summary>
            Extract all the series fields that are available on thetvdb
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data>
               <Series>
                  <id>73739</id>
                  <Actors>|Malcolm David Kelley|Jorge Garcia|Maggie Grace|...|</Actors>
                  <Airs_DayOfWeek>Thursday</Airs_DayOfWeek>
                  <Airs_Time>9:00 PM</Airs_Time>
                  <ContentRating>TV-14</ContentRating>
                  <FirstAired>2004-09-22</FirstAired>
                  <Genre>|Action and Adventure|Drama|Science-Fiction|</Genre>
                  <IMDB_ID>tt0411008</IMDB_ID>
                  <Language>en</Language>
                  <Network>ABC</Network>
                  <Overview>After Oceanic Air flight 815...</Overview>
                  <Rating>8.9</Rating>
                  <Runtime>60</Runtime>
                  <SeriesID>24313</SeriesID>
                  <SeriesName>Lost</SeriesName>
                  <Status>Continuing</Status>
                  <banner>graphical/24313-g2.jpg</banner>
                  <fanart>fanart/original/73739-1.jpg</fanart>
                  <lastupdated>1205694666</lastupdated>
                  <zap2it_id>SH672362</zap2it_id>
               </Series>
             
            </Data>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractEpisodes(System.String)">
            <summary>
            Extract a list of episodes from the given data when the data has the following format:
            <![CDATA[
             <?xml version="1.0" encoding="UTF-8" ?>
             <Episode>
                 <id>332179</id>
                 <DVD_chapter></DVD_chapter>
                 <DVD_discid></DVD_discid>
                 <DVD_episodenumber></DVD_episodenumber>
                 <DVD_season></DVD_season>
                 <Director>|Joseph McGinty Nichol|</Director>
                 <EpisodeName>Chuck Versus the World</EpisodeName>
                 <EpisodeNumber>1</EpisodeNumber>
                 <FirstAired>2007-09-24</FirstAired>
                 <GuestStars>|Julia Ling|Vik Sahay|Mieko Hillman|</GuestStars>
                 <IMDB_ID></IMDB_ID>
                 <Language>English</Language>
                 <Overview>Chuck Bartowski is an average computer geek...</Overview>
                 <ProductionCode></ProductionCode>
                 <Rating>9.0</Rating>
                 <SeasonNumber>1</SeasonNumber>
                 <Writer>|Josh Schwartz|Chris Fedak|</Writer>
                 <absolute_number></absolute_number>
                 <airsafter_season></airsafter_season>
                 <airsbefore_episode></airsbefore_episode>
                 <airsbefore_season></airsbefore_season>
                 <filename>episodes/80348-332179.jpg</filename>
                 <lastupdated>1201292806</lastupdated>
                 <seasonid>27985</seasonid>
                 <seriesid>80348</seriesid>
             </Episode>
             ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractSeriesUpdates(System.String)">
            <summary>
            Extract list of updated series
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data time="1203923101">
               <Series>
                 <id>71969</id>
                 <time>1203848965</time>
               </Series>
             </Data>
             ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractSeriesSearchResults(System.String)">
            <summary>
            Extract the results of a series search with format:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data>
              <Series>
                 <seriesid>73739</seriesid>
                 <language>en</language>
                 <SeriesName>Lost</SeriesName>
                 <banner>graphical/24313-g2.jpg</banner>
                 <Overview>After Oceanic Air flight 815...</Overview>
                 <FirstAired>2004-09-22</FirstAired>
                 <IMDB_ID>tt0411008</IMDB_ID>
                 <zap2it_id>SH672362</zap2it_id>
                 <id>73739</id>
              </Series>
            </Data>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractSeriesFavorites(System.String)">
            <summary>
            Exctract the series favorites
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Favorites>
              <Series>73067</Series>
              <Series>78957</Series>
              <Series>75340</Series>
              <Series>72218</Series>
              <Series>73244</Series>
              <Series>75397</Series>
            </Favorites>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractRating(System.String)">
            <summary>
            Extract a rating from the data in the format
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data>
             <Series>
               <Rating>7.5</Rating>
             </Series>
            </Data>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractEpisodeUpdates(System.String)">
            <summary>
            Extract the updated episodes from the data in the format:
            
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data time="1203923101">
               <Episode>
                 <id>326268</id>
                 <time>1203848662</time>
               </Episode>
             </Data>
             ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractBannerUpdates(System.String)">
            <summary>
            Extract the data of updated banners
            
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Data time="1203923101">
               <Banner>
                 <SeasonNum>1</SeasonNum>
                 <Series>79302</Series>
                 <format>standard</format>
                 <language>en</language>
                 <path>seasons/79302-1.jpg</path>
                 <type>season</type>
               </Banner>
             </Data>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractUpdateTime(System.String)">
            <summary>
            Extract the update time from data
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractBanners(System.String)">
            <summary>
            Extract a list of banners from the data when the data has the format:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Banners>
               <Banner>
                  <id>20106</id>
                  <BannerPath>fanart/original/73739-1.jpg</BannerPath>
                  <VignettePath>fanart/vignette/73739-1.jpg</VignettePath>
                  <ThumbnailPath>_cache/fanart/original/73739-1.jpg</ThumbnailPath>
                  <BannerType>fanart</BannerType>
                  <BannerType2>1920x1080</BannerType2>
                  <Colors>|68,69,59|69,70,58|78,78,68|</Colors>
                  <Language>en</Language>
               </Banner>
               <Banner>
                  <id>18953</id>
                  <BannerPath>seasons/73739-2-2.jpg</BannerPath>
                  <BannerType>season</BannerType>
                  <BannerType2>season</BannerType2>
                  <Language>es</Language>
                  <Season>2</Season>
               </Banner>
               <Banner>
                  <id>9529</id>
                  <BannerPath>graphical/73739-g.jpg</BannerPath>
                  <BannerType>series</BannerType>
                  <BannerType2>graphical</BannerType2>
                  <Language>en</Language>
               </Banner>
            </Banners>
            ]]>
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractActors(System.String)">
            <summary>
            Extract a list of actors when the data has the format:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Actors>
              <Actor>
                <id>22017</id>
                <Image>actors/22017.jpg</Image>
                <Name>Zachary Levi</Name>
                <Role>Chuck Bartowski</Role>
                <SortOrder>0</SortOrder>
              </Actor>
            </Actors>
            ]]>
            </summary>
            <param name="_data">data</param>
            <returns>List of actors</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractUser(System.String)">
            <summary>
            Extract user data from
            </summary>
            <param name="_data"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlReader.ExtractRatings(System.String,TvdbLib.Data.TvdbRating.ItemType)">
            <summary>
            Extract a list of series ratings
            
            The xml file is in the following format:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?> 
            <Data>
              <Series>
                <seriesid>80344</seriesid> 
                <UserRating>7</UserRating> 
                <CommunityRating>8.3224</CommunityRating> 
              </Series>
              <Series>
                <seriesid>72227</seriesid> 
                <UserRating>8</UserRating> 
                <CommunityRating>8.3224</CommunityRating> 
              </Series>
            </Data>
            ]]>
            </summary>
            <param name="_data">The xml content</param>
            <param name="_type">The item type for the ratings</param>
            <returns></returns>
        </member>
        <member name="T:TvdbLib.Cache.ICacheProvider">
            <summary>
            A cache provider stores and loads the data that has been previously retrieved from http://thetvdb.com.
            </summary>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.InitCache">
            <summary>
            Initialises the cache, should do the following things
            - initialise connections used for this cache provider (db connections, network shares,...)
            - create folder structure / db tables / ...  if they are not created already
            - if this is the first time the cache has been initialised (built), mark last_updated with the
              current date
            </summary>
            <returns>TvdbData object</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.CloseCache">
            <summary>
            Closes the cache (e.g. close open connection, etc.)
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.ClearCache">
            <summary>
            Completely refreshes the cache (all stored information is lost)
            </summary>
            <returns>true if the cache was cleared successfully, 
                     false otherwise (e.g. no write rights,...)</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.RemoveFromCache(System.Int32)">
            <summary>
            Remove a specific series from cache
            </summary>
            <param name="_seriesId">the id of the series</param>
            <returns>true if the series was removed from the cache successfully, 
                     false otherwise (e.g. series not cached)</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.LoadUserDataFromCache">
            <summary>
            Loads all cached series from cache -> can take a while
            </summary>
            <returns>The loaded TvdbData object</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.LoadLanguageListFromCache">
            <summary>
            Loads the available languages from cache
            </summary>
            <returns>A list of TvdbLanguage objects from cache or null</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.LoadAllSeriesFromCache">
            <summary>
            Loads all series from cache
            </summary>
            <returns>A list of TvdbSeries objects from cache or null</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.LoadSeriesFromCache(System.Int32)">
            <summary>
            Load the give series from cache
            </summary>
            <param name="_seriesId">Id of the series to load</param>
            <returns>The TvdbSeries object from cache or null</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.LoadUserInfoFromCache(System.String)">
            <summary>
            Load user info from cache
            </summary>
            <param name="_userId">Id of the user</param>
            <returns>TvdbUser object or null if the user couldn't be loaded</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.SaveToCache(TvdbLib.TvdbData)">
            <summary>
            Saves cache settings
            </summary>
            <param name="_content">settings</param>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.SaveToCache(System.Collections.Generic.List{TvdbLib.Data.TvdbLanguage})">
            <summary>
            Save the language to cache
            </summary>
            <param name="_languageList">List of languages that are available on http://thetvdb.com</param>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.SaveToCache(TvdbLib.Data.TvdbSeries)">
            <summary>
            Saves the series to cache
            </summary>
            <param name="_series">TvdbSeries object</param>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.SaveToCache(TvdbLib.Data.TvdbUser)">
            <summary>
            Saves the user data to cache
            </summary>
            <param name="_user">TvdbUser object</param>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.SaveToCache(System.Drawing.Image,System.Int32,System.String)">
            <summary>
            Save the given image to cache
            </summary>
            <param name="_image">banner to save</param>
            <param name="_seriesId">id of series</param>
            <param name="_fileName">filename (will be the same name used by LoadImageFromCache)</param>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.LoadImageFromCache(System.Int32,System.String)">
            <summary>
            Loads the specified image from the cache
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_fileName">filename of the image (same one as used by SaveToCache)</param>
            <returns>The loaded image or null if the image wasn't found</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.GetCachedSeries">
            <summary>
            Receives a list of all series that have been cached
            </summary>
            <returns>A list of series that have been already stored with this cache provider</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.IsCached(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check if the series is cached in the given configuration
            </summary>
            <param name="_seriesId">Id of the series</param>
            <param name="_lang">Language of the series</param>
            <param name="_episodesLoaded">are episodes loaded</param>
            <param name="_bannersLoaded">are banners loaded</param>
            <param name="_actorsLoaded">are actors loaded</param>
            <returns>true if the series is cached, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Cache.ICacheProvider.RemoveImageFromCache(System.Int32,System.String)">
            <summary>
            Removes the specified image from cache (if it has been cached)
            </summary>
            <param name="_seriesId">id of series</param>
            <param name="_fileName">name of image</param>
            <returns>true if image was removed successfully, false otherwise (e.g. image didn't exist)</returns>
        </member>
        <member name="P:TvdbLib.Cache.ICacheProvider.Initialised">
            <summary>
            Is the cache provider initialised
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbHandler">
            <summary>
            Tvdb Handler for handling all features that are available on http://thetvdb.com/
            
            http://thetvdb.com/ is an open database that can be modified by anybody. All content and images on the site have been contributed by our users. The database schema and website are open source under the GPL, and are available at Sourceforge.
            The site also has a full XML API that allows other software and websites to use this information. The API is currently being used by the myTV add-in for Windows Media Center, XBMC (formerly XBox Media Center); the meeTVshows and TVNight plugins for Meedio; the MP-TVSeries plugin for MediaPortal; Boxee; and many more.
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbHandler.#ctor(System.String)">
            <summary>
            <para>Creates a new Tvdb handler</para>
            <para>The tvdb handler is used not only for downloading data from thetvdb but also to cache the downloaded data to a persistent storage,
                  handle user specific tasks and keep the downloaded data consistent with the online data (via the updates api)</para>
            </summary>
            <param name="_apiKey">The api key used for downloading data from thetvdb -> see http://thetvdb.com/wiki/index.php/Programmers_API</param>
        </member>
        <member name="M:TvdbLib.TvdbHandler.#ctor(TvdbLib.Cache.ICacheProvider,System.String)">
            <summary>
            Creates a new Tvdb handler
            </summary>
            <param name="_cacheProvider">The cache provider used to store the information</param>
            <param name="_apiKey">Api key to use for this project</param>
        </member>
        <member name="M:TvdbLib.TvdbHandler.InitCache">
            <summary>
            Load previously stored information on (except series information) from cache
            </summary>
            <returns>true if cache could be loaded successfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.ClearCache">
            <summary>
            Completely refreshes the cache (all stored information is lost) -> cache
            must be initialised to call this method
            </summary>
            <returns>true if the cache was cleared successfully, 
                     false otherwise (e.g. no write rights,...)</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.SearchSeries(System.String)">
            <summary>
            Search for a seris on tvdb using the name of the series
            </summary>
            <param name="_name">Name of series</param>
            <returns>List of possible hits (containing only very basic information (id, name,....) TODO: finish</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetSeries(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the series with the given id either from cache (if it has already been loaded) or from 
            the selected tvdb mirror.
            
            To check if this series has already been cached, use the Method IsCached(TvdbSeries _series)
            </summary>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Tvdb is not available</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The given api key is not valid</exception>
            <param name="_seriesId">id of series</param>
            <param name="_language">language that should be retrieved</param>
            <param name="_loadEpisodes">if true, the full series record will be loaded (series + all episodes), otherwise only the base record will be loaded which contains only series information</param>
            <param name="_loadActors">if true also loads the extended actor information</param>
            <param name="_loadBanners">if true also loads the paths to the banners</param>
            <returns>Instance of TvdbSeries containing all gained information</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetSeriesZipped(System.Int32,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Gets the series with the given id either from cache (if it has already been loaded) or from 
            the selected tvdb mirror. If this series is not already cached and the series has to be 
            downloaded, the zipped version will be downloaded
            
            To check if this series has already been cached, use the Method IsCached(TvdbSeries _series)
            </summary>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Tvdb is not available</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The given api key is not valid</exception>
            <param name="_seriesId">id of series</param>
            <param name="_language">language that should be retrieved</param>
            <returns>Instance of TvdbSeries containing all gained information</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetSeries(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the series with the given id either from cache (if it has already been loaded) or from 
            the selected tvdb mirror. If you use zip the request automatically downloads the episodes, the actors and the banners, so you should also select those features.
            
            To check if this series has already been cached, use the Method IsCached(TvdbSeries _series)
            </summary>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Tvdb is not available</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The given api key is not valid</exception>
            <param name="_seriesId">id of series</param>
            <param name="_language">language abbriviation of the series that should be retrieved</param>
            <param name="_loadEpisodes">if true, the full series record will be loaded (series + all episodes), otherwise only the base record will be loaded which contains only series information</param>
            <param name="_loadBanners">if true also loads the paths to the banners</param>
            <param name="_loadActors">if true also loads the extended actor information</param>
            <param name="_useZip">If this series is not already cached and the series has to be downloaded, the zipped version will be downloaded</param>
            <returns>Instance of TvdbSeries containing all gained information</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetFullSeries(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean)">
            <summary>
            Gets the full series (including episode information and actors) with the given id either from cache 
            (if it has already been loaded) or from the selected tvdb mirror.
            
            To check if this series has already been cached, pleas use the Method IsCached(TvdbSeries _series)
            </summary>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Tvdb is not available</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The given api key is not valid</exception>
            <param name="_seriesId">id of series</param>
            <param name="_language">language that should be retrieved</param>
            <param name="_loadBanners">if true also loads the paths to the banners</param>
            <returns>Instance of TvdbSeries containing all gained information</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetBasicSeries(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean)">
            <summary>
            Gets the basic series (without episode information and actors) with the given id either from cache 
            (if it has already been loaded) or from the selected tvdb mirror.
            
            To check if this series has already been cached, please use the Method IsCached(TvdbSeries _series)
            </summary>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Tvdb is not available</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The given api key is not valid</exception>
            <param name="_seriesId">id of series</param>
            <param name="_language">language that should be retrieved</param>
            <param name="_loadBanners">if true also loads the paths to the banners</param>
            <returns>Instance of TvdbSeries containing all gained information</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.IsCached(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns if the series is locally cached
            </summary>
            <param name="_seriesId">Id of the series</param>
            <param name="_language">Language</param>
            <param name="_loadEpisodes">Load Episodes</param>
            <param name="_loadActors">Load Actors</param>
            <param name="_loadBanners">Load Banners</param>
            <returns>True if the series is cached in the given configuration</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetEpisode(System.Int32,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Retrieve the episode with the given id in the given language. 
            
            Note that the episode is always downloaded from thetvdb since it would
            be practical to load each and every cached series to look for the 
            episode id
            </summary>
            <param name="_episodeId">id of the episode</param>
            <param name="_language">languageof the episode</param>
            <returns>The retrieved episode</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetEpisode(System.Int32,System.Int32,System.Int32,TvdbLib.Data.TvdbEpisode.EpisodeOrdering,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Retrieve the episode with the given parameters. This function will find
            episodes that are already cached.
            </summary>
            <param name="_seriesId">id of the series</param>
            <param name="_seasonNr">season number of the episode</param>
            <param name="_episodeNr">number of the episode</param>
            <param name="_language">language of the episode</param>
            <param name="_order">The sorting order that should be user when downloading the episode</param>
            <returns>The retrieved episode</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetEpisode(System.Int32,System.DateTime,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Retrieve the episode with the given parameters.
            </summary>
            <param name="_seriesId">id of the series</param>
            <param name="_airDate">When did the episode air</param>
            <param name="_language">language of the episode</param>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The given api key is not valid</exception>
            <returns>The retrieved episode</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetSeriesFromCache(System.Int32)">
            <summary>
            Get the series from cache
            </summary>
            <param name="_seriesId">Id of series</param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateAllSeries">
            <summary>
            Update all the series (not using zip) with the updated information
            </summary>
            <returns>true if the update was successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateAllSeries(System.Boolean)">
            <summary>
            Update all the series with the updated information
            </summary>
            <param name="_zipped">download zipped file?</param>
            <exception cref="T:TvdbLib.Exceptions.TvdbCacheNotInitialisedException">In order to update, the cache has to be initialised</exception>
            <returns>true if the update was successful, false otherwise</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateAllSeries(TvdbLib.TvdbHandler.Interval,System.Boolean)">
            <summary>
            Update all the series with the updated information
            </summary>
            <param name="_zipped">download zipped file?</param>
            <param name="_interval">Specifies the interval of the update (day, week, month)</param>
            <returns>true if the update was successful, false otherwise</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbCacheNotInitialisedException">In order to update, the cache has to be initialised</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetLastUpdate">
            <summary>
            Gets the date of the last (successfull) update from thetvdb
            </summary>
            <returns>Date of last update or null if no previous update or cache not initialised</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.AbortUpdate(System.Boolean)">
            <summary>
            Aborts the currently running Update
            </summary>
            <param name="_saveChangesMade">if true, all changes that have already been 
                        made will be saved to cache, if not they will be discarded</param>
        </member>
        <member name="M:TvdbLib.TvdbHandler.MakeUpdate(TvdbLib.Util.UpdateInterval,System.Boolean)">
            <summary>
            Make the update
            </summary>
            <param name="_interval">interval of update</param>
            <param name="_zipped">zipped downloading yes/no</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateBanner(TvdbLib.Data.TvdbSeries,TvdbLib.Data.TvdbBanner)">
            <summary>
            Update the series with the banner
            </summary>
            <param name="_series"></param>
            <param name="_banner"></param>
            <returns>true, if the banner was updated successfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateEpisode(TvdbLib.Data.TvdbSeries,TvdbLib.Data.TvdbEpisode,System.Int32,System.String@)">
            <summary>
            Update the series with the episode (Add it to the series if it doesn't already exist or update the episode if the current episode is older than the updated one)
            </summary>
            <param name="_series">Series of the updating episode</param>
            <param name="_episode">Episode that is updated</param>
            <param name="_progress">Progress of the update run</param>
            <param name="_text">Description of the current update</param>
            <returns>true if episode has been updated, false if not (e.g. timestamp of updated episode older than
                     timestamp of existing episode</returns> 
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateSeries(TvdbLib.Data.TvdbSeries,System.DateTime,System.Int32)">
            <summary>
            Download the new series and update the information
            </summary>
            <param name="_series">Series to update</param>
            <param name="_lastUpdated">When was the last update made</param>
            <param name="_progress">The progress done until now</param>
            <returns>true if the series has been upated false if not</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.ReloadLanguages">
            <summary>
            Reloads all language definitions from tvdb
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.CloseCache">
            <summary>
            Closes the cache provider (should be called before exiting the application)
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetCachedSeries">
            <summary>
            Returns all series id's that are already cached in memory or locally via the cacheprovider
            </summary>
            <returns>List of loaded series</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.ForceUpdate(TvdbLib.Data.TvdbSeries)">
            <summary>
            Forces a complete update of the series. All information that has already been loaded (including loaded images!) will be deleted and reloaded from tvdb -> if you only want to update the series, use the "MakeUpdate" method
            </summary>
            <param name="_series">Series to reload</param>
            <returns>The new TvdbSeries object</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.ForceReload(TvdbLib.Data.TvdbSeries)">
            <summary>
            Forces a complete reload of the series. All information that has already been loaded (including loaded images!) will be deleted and reloaded from tvdb -> if you only want to update the series, use the "MakeUpdate" method
            </summary>
            <param name="_series">Series to reload</param>
            <returns>The new TvdbSeries object</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.ForceUpdate(TvdbLib.Data.TvdbSeries,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Forces a complete reload of the series. All information that has already been loaded (including loaded images!) will be deleted and reloaded from tvdb -> if you only want to update the series, use the "MakeUpdate" method
            </summary>
            <param name="_series">Series to update</param>
            <param name="_loadEpisodes">Should episodes be loaded as well</param>
            <param name="_loadActors">Should actors be loaded as well</param>
            <param name="_loadBanners">Should banners be loaded as well</param>
            <returns>The new TvdbSeries object</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.ForceReload(TvdbLib.Data.TvdbSeries,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Forces a complete reload of the series. All information that has already been loaded (including loaded images!) will be deleted and reloaded from tvdb -> if you only want to update the series, use the "MakeUpdate" method
            </summary>
            <param name="_series">Series to update</param>
            <param name="_loadEpisodes">Should episodes be loaded as well</param>
            <param name="_loadActors">Should actors be loaded as well</param>
            <param name="_loadBanners">Should banners be loaded as well</param>
            <returns>The new TvdbSeries object</returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetPreferredLanguage">
            <summary>
            Gets the preferred language of the user
            
            user information has to be set, otherwise TvdbUserNotFoundException is thrown
            </summary>
            <returns>preferred language of user</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.CheckIfSeriesFavorite(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Check if series is in the list of favorites
            </summary>
            <param name="_series"></param>
            <param name="_favs"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetUserFavouritesList">
            <summary>
            Gets a list of IDs of the favorite series of the user
            </summary>
            <returns>id list of favorite series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetUserFavorites(TvdbLib.Data.TvdbLanguage)">
            <summary>
            Get the favorite series of the user (only basic series information will be loaded)
            </summary>
            <param name="_lang">Which language should be used</param>
            <returns>List of favorite series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.AddSeriesToFavorites(System.Int32)">
            <summary>
            Adds the series id to the users list of favorites and returns the new list of
            favorites
            </summary>
            <param name="_seriesId">series to add to the favorites</param>
            <returns>new list with all favorites</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.AddSeriesToFavorites(TvdbLib.Data.TvdbSeries)">
            <summary>
            Adds the series to the users list of favorites and returns the new list of
            favorites
            </summary>
            <param name="_series">series to add to the favorites</param>
            <returns>new list with all favorites</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.RemoveSeriesFromFavorites(System.Int32)">
            <summary>
            Removes the series id from the users list of favorites and returns the new list of
            favorites
            </summary>
            <param name="_seriesId">series to remove from the favorites</param>
            <returns>new list with all favorites</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.RemoveSeriesFromFavorites(TvdbLib.Data.TvdbSeries)">
            <summary>
            Removes the series from the users list of favorites and returns the new list of
            favorites
            </summary>
            <param name="_series">series to remove from the favorites</param>
            <returns>new list with all favorites</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.RateSeries(System.Int32,System.Int32)">
            <summary>
            Rate the given series
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_rating">The rating we want to give for this series</param>
            <returns>Current rating of the series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.RateEpisode(System.Int32,System.Int32)">
            <summary>
            Rate the given episode
            </summary>
            <param name="_episodeId">Episode Id</param>
            <param name="_rating">Rating we want to give for episode</param>
            <returns>Current rating of episode</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetRatedSeries">
            <summary>
            Gets all series this user has already ratet
            </summary>
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">Thrown when no user is set</exception>
            <returns>A list of all rated series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbHandler.GetRatingsForSeries(System.Int32)">
            <summary>
            Gets all series this user has already ratet
            </summary>
            <param name="_seriesId">Id of series</param>
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">Thrown when no user is set</exception>
            <returns>A list of all ratings for the series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="E:TvdbLib.TvdbHandler.UpdateProgressed">
            <summary>
            Called whenever an running update makes any progress
            </summary>
        </member>
        <member name="E:TvdbLib.TvdbHandler.UpdateFinished">
            <summary>
            Called when a running update finishes, UpdateFinishedEventArgs gives an overview
            of the update
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UserInfo">
            <summary>
            UserInfo for this tvdb handler
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.ApiKey">
            <summary>
            Unique id for every project that is using thetvdb
            
            More information on: http://thetvdb.com/wiki/index.php/Programmers_API
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.IsCacheInitialised">
            <summary>
            Is the handler using caching and is the cache initialised
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.Languages">
            <summary>
            Returns list of all available Languages on tvdb
            </summary>
            <returns>list of available languages</returns>
        </member>
        <member name="P:TvdbLib.TvdbHandler.IsLanguagesCached">
            <summary>
            Are the language definitions already cached
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbHandler.UpdateProgressEventArgs">
            <summary>
            EventArgs used when a running update progresses, contains information on the
            current stage and progress
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateProgressEventArgs.#ctor(TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor for UpdateProgressEventArgs
            </summary>
            <param name="_currentUpdateStage">The current state of the updating progress</param>
            <param name="_currentUpdateDescription">Description of the current update stage</param>
            <param name="_currentStageProgress">Progress of the current stage</param>
            <param name="_overallProgress">Overall progress of the update</param>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateProgressEventArgs.CurrentUpdateStage">
            <summary>
            Current state of update progress
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateProgressEventArgs.CurrentUpdateDescription">
            <summary>
            Description of the current update stage
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateProgressEventArgs.CurrentStageProgress">
            <summary>
            Progress of the current stage
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateProgressEventArgs.OverallProgress">
            <summary>
            Overall progress of the update
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage">
            <summary>
            The current state of the updating progress
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage.downloading">
            <summary>
            we're currently downloading the update files from http://thetvdb.com
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage.seriesupdate">
            <summary>
            we're currently processing the updated series
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage.episodesupdate">
            <summary>
            we're currently processing the updated episodes
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage.bannerupdate">
            <summary>
            we're currently processing the updated banner
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.UpdateProgressEventArgs.UpdateStage.finishupdate">
            <summary>
            the updating itself has finished, do cleanup work
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbHandler.UpdateFinishedEventArgs">
            <summary>
            EventArgs used when an update has finished, contains start date, end date and 
            an overview of all updated content
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbHandler.UpdateFinishedEventArgs.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Constructor for UpdateFinishedEventArgs
            </summary>
            <param name="_started">When did the update start</param>
            <param name="_ended">When did the update finish</param>
            <param name="_updatedSeries">List of all series (ids) that were updated</param>
            <param name="_updatedEpisodes">List of all episode (ids)that were updated</param>
            <param name="_updatedBanners">List of all banners (ids) that were updated</param>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateFinishedEventArgs.UpdateStarted">
            <summary>
            When did the update start
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateFinishedEventArgs.UpdateFinished">
            <summary>
            When did the update finish
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateFinishedEventArgs.UpdatedSeries">
            <summary>
            List of all series (ids) that were updated
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateFinishedEventArgs.UpdatedEpisodes">
            <summary>
            List of all episode (ids)that were updated
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbHandler.UpdateFinishedEventArgs.UpdatedBanners">
            <summary>
            List of all banners (ids) that were updated
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbHandler.UpdateProgressDelegate">
            <summary>
            Delegate for UpdateProgressed Event
            </summary>
            <param name="_event">EventArgs</param>
        </member>
        <member name="T:TvdbLib.TvdbHandler.UpdateFinishedDelegate">
            <summary>
            Delegate for UpdateFinished event
            </summary>
            <param name="_event">EventArgs</param>
        </member>
        <member name="T:TvdbLib.TvdbHandler.Interval">
            <summary>
            Update interval
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.Interval.day">
            <summary>
            updated content since the last day
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.Interval.week">
            <summary>
            updated content since the last week
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.Interval.month">
            <summary>
            updated content since the last month
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbHandler.Interval.automatic">
            <summary>
            the interval is determined automatically
            </summary>
        </member>
        <member name="M:TvdbLib.Util.Int32Parse(System.String)">
            <summary>
            Parses an integer string and returns the number or -99 if the format
            is invalid
            </summary>
            <param name="_number"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.DoubleParse(System.String)">
            <summary>
            Parses an double string and returns the number or -99 if the format
            is invalid
            </summary>
            <param name="_number"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.SplitTvdbString(System.String)">
            <summary>
            Splits a tvdb string (having the format | item1 | item2 | item3 |)
            </summary>
            <param name="_text"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.ParseLanguage(System.String)">
            <summary>
            Parse the short description of a tvdb language and returns the proper
            object. If no such language exists yet (maybe the list of available
            languages hasn't been downloaded yet), a placeholder is created
            </summary>
            <param name="_shortLanguageDesc"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.UnixToDotNet(System.String)">
            <summary>
            Converts a unix timestamp (used on tvdb) into a .net datetime object
            </summary>
            <param name="_unixTimestamp">Timestamp to convert</param>
            <returns>.net DateTime object</returns>
        </member>
        <member name="M:TvdbLib.Util.DotNetToUnix(System.DateTime)">
            <summary>
            Converts a .net datetime object into a unix timestamp (used on tvdb)  
            </summary>
            <param name="_date">Date to convert</param>
            <returns>Unix timestamp</returns>
        </member>
        <member name="M:TvdbLib.Util.GetDayOfWeek(System.String)">
            <summary>
            returns a day of the week object parsed from the string
            </summary>
            <param name="_dayOfWeek">String representation of this day of the week</param>
            <returns>.net DayOfWeek enum</returns>
        </member>
        <member name="M:TvdbLib.Util.ParseColors(System.String)">
            <summary>
            Returns a List of colors parsed from the _text
            </summary>
            <param name="_text"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.ParseResolution(System.String)">
            <summary>
            Returns a point objects parsed from _text
            </summary>
            <param name="_text"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.ParseBoolean(System.String)">
            <summary>
            Parse a boolean value from thetvdb xml files
            </summary>
            <param name="_boolean">Boolean value to parse</param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.ParseSeasonBannerType(System.String)">
            <summary>
            
            </summary>
            <param name="_type"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.ParseSeriesBannerType(System.String)">
            <summary>
            Returns the fitting SeriesBanner type from parameter
            </summary>
            <param name="_type"></param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Util.AddEpisodeToSeries(TvdbLib.Data.TvdbEpisode,TvdbLib.Data.TvdbSeries)">
            <summary>
            Add the episode to the series
            </summary>
            <param name="_episode"></param>
            <param name="_series"></param>
        </member>
        <member name="P:TvdbLib.Util.LanguageList">
            <summary>
            List of available languages -> needed for some methods
            </summary>
        </member>
        <member name="T:TvdbLib.Util.UpdateInterval">
            <summary>
            Update interval
            </summary>
        </member>
        <member name="T:TvdbLib.Util.UserFavouriteAction">
            <summary>
            Type when handling user favorites
            </summary>
        </member>
        <member name="T:TvdbLib.Cache.BinaryCacheProvider">
            <summary>
            Binary cache provider saves all the cached info into 
            
            broken at the moment -> use CacheProvider
            </summary>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.#ctor(System.String)">
            <summary>
            BinaryCacheProvider constructor
            </summary>
            <param name="_root">The root folder where the cached data should be stored</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadUserDataFromCache">
            <summary>
            Load the cached data
            </summary>
            <returns>TvdbData object</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.InitCache">
            <summary>
            Initialises the cache, should do the following things
            - initialise connections used for this cache provider (db connections, network shares,...)
            - create folder structure / db tables / ...  if they are not created already
            - if this is the first time the cache has been initialised (built), mark last_updated with the
              current date
            </summary>
            <returns>Tvdb Data object</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.CloseCache">
            <summary>
            Closes the cache (e.g. close open connection, etc.)
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(TvdbLib.TvdbData)">
            <summary>
            Saves cache settings
            </summary>
            <param name="_content">settings</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(System.DateTime)">
            <summary>
            Saves the time of the last update to cache
            </summary>
            <param name="_time">time of last update</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(System.Collections.Generic.List{TvdbLib.Data.TvdbLanguage})">
            <summary>
            Save the language to cache
            </summary>
            <param name="_languageList">List of languages</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(System.Collections.Generic.List{TvdbLib.Data.TvdbMirror})">
            <summary>
            Save the mirror info to cache
            </summary>
            <param name="_mirrorInfo">list of mirrors</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadLanguageListFromCache">
            <summary>
            Loads the available languages from cache
            </summary>
            <returns>List of available languages</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadMirrorListFromCache">
            <summary>
            Load the available mirrors from cache
            </summary>
            <returns>List of available mirrors</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadSeriesFromCache(System.Int32)">
            <summary>
            Load the give series from cache
            </summary>
            <param name="_seriesId">id of series to load</param>
            <returns>loaded series, or null if not successful</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(TvdbLib.Data.TvdbSeries)">
            <summary>
            Saves the series to cache
            </summary>
            <param name="_series">Tvdb series</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(TvdbLib.Data.TvdbUser)">
            <summary>
            Saves the user data to cache
            </summary>
            <param name="_user">TvdbUser</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadAllSeriesFromCache">
            <summary>
            Loads all series from cache
            </summary>
            <returns>List that contains all series object that had been previously cached</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadUserInfoFromCache(System.String)">
            <summary>
            Load the userinfo from the cache
            </summary>
            <param name="_userId">Id of user</param>
            <returns>TvdbUser object</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.GetCachedSeries">
            <summary>
            Receives a list of all series that have been cached
            </summary>
            <returns>Ids of series that are already cached</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.IsCached(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check if the series is cached in the given configuration
            </summary>
            <param name="_seriesId">Id of the series</param>
            <param name="_lang">Language of the series</param>
            <param name="_episodesLoaded">are episodes loaded</param>
            <param name="_bannersLoaded">are banners loaded</param>
            <param name="_actorsLoaded">are actors loaded</param>
            <returns>true if the series is cached, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.ClearCache">
            <summary>
            Completely refreshes the cached (all stored information is lost). 
            </summary>
            <returns>true if the cache was cleared successfully, 
                     false otherwise (e.g. no write rights,...)</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.RemoveFromCache(System.Int32)">
            <summary>
            Remove a specific series from cache
            </summary>
            <param name="_seriesId">the id of the series</param>
            <returns>true if the series was removed from the cache successfully, 
                     false otherwise (e.g. series not cached)</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SaveToCache(System.Drawing.Image,System.Int32,System.String)">
            <summary>
            Save the given image to cache
            </summary>
            <param name="_image">banner to save</param>
            <param name="_seriesId">id of series</param>
            <param name="_fileName">filename (will be the same name used by LoadImageFromCache)</param>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadImageFromCache(System.Int32,System.String)">
            <summary>
            Loads the specified image from the cache
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_fileName">filename of the image (same one as used by SaveToCache)</param>
            <returns>The loaded image or null if the image wasn't found</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.RemoveImageFromCache(System.Int32,System.String)">
            <summary>
            Removes the specified image from cache (if it has been cached)
            </summary>
            <param name="_seriesId">id of series</param>
            <param name="_fileName">name of image</param>
            <returns>true if image was removed successfully, false otherwise (e.g. image didn't exist)</returns>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.LoadLastUpdatedFromCache">
            <summary>
            Load the time when the cache was updated last
            </summary>
            <returns>DateTime of lsat update</returns>
        </member>
        <member name="P:TvdbLib.Cache.BinaryCacheProvider.Initialised">
            <summary>
            Is the cache provider initialised
            </summary>
        </member>
        <member name="T:TvdbLib.Cache.BinaryCacheProvider.SeriesConfiguration">
            <summary>
            Class to store what parts of the cached series has been loaded
            </summary>
        </member>
        <member name="M:TvdbLib.Cache.BinaryCacheProvider.SeriesConfiguration.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="_seriesId">Id of series</param>
            <param name="_episodesLoaded">Are episodes loaded</param>
            <param name="_bannersLoaded">Are banners loaded</param>
            <param name="_actorsLoaded">Are actors loaded</param>
        </member>
        <member name="P:TvdbLib.Cache.BinaryCacheProvider.SeriesConfiguration.ActorsLoaded">
            <summary>
            Are actors loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Cache.BinaryCacheProvider.SeriesConfiguration.BannersLoaded">
            <summary>
            Are banners loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Cache.BinaryCacheProvider.SeriesConfiguration.EpisodesLoaded">
            <summary>
            Are episodes loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Cache.BinaryCacheProvider.SeriesConfiguration.SeriesId">
            <summary>
            Id of series
            </summary>
        </member>
        <member name="T:TvdbLib.Cache.XmlCacheProvider">
            <summary>
            XmlCacheProvider stores all the information that have been retrieved from http://thetvdb.com as human-readable xml files on the hard disk
            </summary>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.#ctor(System.String)">
            <summary>
            Constructor for XmlCacheProvider
            </summary>
            <param name="_rootFolder">This is the folder on the disk where all the information are stored</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.ToString">
            <summary>
            Properly describe the CacheProvider for neat-reasons
            </summary>
            <returns>String describing the cache provider</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.InitCache">
            <summary>
            Initialises the cache, should do the following things
            - initialise connections used for this cache provider (db connections, network shares,...)
            - create folder structure / db tables / ...  if they are not created already
            - if this is the first time the cache has been initialised (built), mark last_updated with the
              current date
            </summary>
            <returns>TvdbData object</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.CloseCache">
            <summary>
            Closes the cache (e.g. close open connection, etc.)
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.SaveToCache(TvdbLib.TvdbData)">
            <summary>
            Saves cache settings
            </summary>
            <param name="_content">settings</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.SaveToCache(System.Collections.Generic.List{TvdbLib.Data.TvdbLanguage})">
            <summary>
            Save the language to cache
            </summary>
            <param name="_languageList">List of languages that are available on http://thetvdb.com</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.SaveToCache(System.Collections.Generic.List{TvdbLib.Data.TvdbMirror})">
            <summary>
            Save the mirror info to cache
            </summary>
            <param name="_mirrorInfo">Mirrors</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.SaveToCache(TvdbLib.Data.TvdbSeries)">
            <summary>
            Saves the series to cache
            </summary>
            <param name="_series">The series to save</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadUserDataFromCache">
            <summary>
            Loads the settings data from cache 
            </summary>
            <returns>The loaded TvdbData object</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadLanguageListFromCache">
            <summary>
            Loads the available languages from cache
            </summary>
            <returns>List of available languages</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadMirrorListFromCache">
            <summary>
            Load the available mirrors from cache
            </summary>
            <returns>List of mirrors</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadAllSeriesFromCache">
            <summary>
            Loads all series from cache
            </summary>
            <returns>A list of TvdbSeries objects from cache or null</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadSeriesFromCache(System.Int32)">
            <summary>
            Load the give series from cache
            </summary>
            <param name="_seriesId">Id of the series to load</param>
            <returns>Series that has been loaded or null if series doesn't exist</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadUserInfoFromCache(System.String)">
            <summary>
            Load user info from cache
            </summary>
            <param name="_userId">Id of the user</param>
            <returns>TvdbUser object or null if the user couldn't be loaded</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.SaveToCache(TvdbLib.Data.TvdbUser)">
            <summary>
            Saves the user data to cache
            </summary>
            <param name="_user">TvdbUser object</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.GetCachedSeries">
            <summary>
            Receives a list of all series that have been cached
            </summary>
            <returns>A list of series that have been already stored with this cache provider</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.IsCached(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check if the series is cached in the given configuration
            </summary>
            <param name="_seriesId">Id of the series</param>
            <param name="_lang">Language of the series</param>
            <param name="_episodesLoaded">are episodes loaded</param>
            <param name="_bannersLoaded">are banners loaded</param>
            <param name="_actorsLoaded">are actors loaded</param>
            <returns>true if the series is cached, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.ClearCache">
            <summary>
            Completely refreshes the cache (all stored information is lost)
            </summary>
            <returns>true if the cache was cleared successfully, 
                     false otherwise (e.g. no write rights,...)</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.RemoveFromCache(System.Int32)">
            <summary>
            Remove a specific series from cache
            </summary>
            <param name="_seriesId">the id of the series</param>
            <returns>true if the series was removed from the cache successfully, 
                     false otherwise (e.g. series not cached)</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.SaveToCache(System.Drawing.Image,System.Int32,System.String)">
            <summary>
            Save the given image to cache
            </summary>
            <param name="_image">banner to save</param>
            <param name="_seriesId">id of series</param>
            <param name="_fileName">filename (will be the same name used by LoadImageFromCache)</param>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.LoadImageFromCache(System.Int32,System.String)">
            <summary>
            Loads the specified image from the cache
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_fileName">filename of the image (same one as used by SaveToCache)</param>
            <returns>The loaded image or null if the image wasn't found</returns>
        </member>
        <member name="M:TvdbLib.Cache.XmlCacheProvider.RemoveImageFromCache(System.Int32,System.String)">
            <summary>
            Removes the specified image from cache (if it has been cached)
            </summary>
            <param name="_seriesId">id of series</param>
            <param name="_fileName">name of image</param>
            <returns>true if image was removed successfully, false otherwise (e.g. image didn't exist)</returns>
        </member>
        <member name="P:TvdbLib.Cache.XmlCacheProvider.Initialised">
            <summary>
            Is the cache provider initialised
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbActorBanner">
            <summary>
            An actor poster
                *  Actor images must be 300px x 450px and must fill the entire image. Do not add black bars to the sides to get it to that size.
                    * Actor images must be smaller than 100kb
                    * Low quality images should not be scaled up to fit the resolution. Use only high quality art.
                    * Actor images should show the actor in that particular role, wearing the clothes/makeup they'd wear on the series. Unless it's a cartoon, in which case just a normal picture of the voice actor will do.
                    * Try to shy away from full body shots. Ideally include some upper body but don't go to far past the waist.
                    * No nudity, even if the actor is playing the role of a striper who is almost always nude, the images must be family safe. 
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbBanner">
            <summary>
            Tvdb Banners are the graphical element of tvdb. There are different types of banners which are
            representet by sub-classes in this library. These subclasses are:
            <list type="bullet">
            <item>
              <term>TvdbEpisodeBanner</term>
              <description>Each episode may contain a small image that should be an non-spoiler action shot from the episode (http://thetvdb.com/wiki/index.php/Episode_Images)</description>
            </item>                 
            <item>
              <term>TvdbFanartBanner</term>
              <description>Fan Art is high quality artwork that is displayed in the background of HTPC menus (http://thetvdb.com/wiki/index.php/Fan_Art)</description>
            </item>                    
            <item>
              <term>TvdbSeasonBanner</term>
              <description>Banner for each season of a series, dvd-style (400 x 578) or banner style (758 x 140) (http://thetvdb.com/wiki/index.php/Wide_Season_Banners)</description>
            </item>                    
            <item>
              <term>TvdbSeriesBanner</term>
              <description>Wide banner for each series (758 x 140), comes in graphical, text or blank style. For further information see http://thetvdb.com/wiki/index.php/Series_Banners</description>
            </item>                    
            <item>
              <term>TvdbPosterBanner</term>
              <description>Newest addition to the tvdb graphical section (680px x 1000px) and not smaller than 500k (http://thetvdb.com/wiki/index.php/Posters)</description>
            </item>                    
            </list>
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.LoadBanner">
            <summary>
            Loads the actual image data of the banner
            </summary>
            <returns>true if the banner could be loaded successfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.LoadBanner(System.Boolean)">
            <summary>
            Loads the actual image data of the banner
            </summary>
            <param name="_replaceOld">If true will replace an old image (if one exists already)</param>
            <returns>true if the banner could be loaded successfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.UnloadBanner">
            <summary>
            Unloads the image and saves it to cache
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.UnloadBanner(System.Boolean)">
            <summary>
            Unloads the image
            </summary>
            <param name="_saveToCache">should the image kept in cache</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.CreateCacheName(System.String,System.Boolean)">
            <summary>
            Creates the name used to store images in cache
            </summary>
            <param name="_path">Path of the image</param>
            <param name="_thumb">Is the image a thumbnail</param>
            <returns>Name used for caching image</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.LoadBanner(System.Drawing.Image)">
            <summary>
            Loads the banner with the given image
            </summary>
            <param name="_img">Image object that should be used for this banner</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.TvdbBanner.LoadImage(System.String)">
            <summary>
            Loads the image from the given path
            </summary>
            <param name="_path">Path of image that should be used for this banner</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.CacheProvider">
            <summary>
            Used to load/save images persistent if we're using a cache provider 
            (should keep memory usage much lower)
            
            on the other hand we have a back-ref to tvdb (from a data class), which sucks
            
            todo: think of a better way to handle this
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.Language">
            <summary>
            Language of the banner
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.Id">
            <summary>
            Id of the banner
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.BannerImage">
            <summary>
            Image data of the banner
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.IsLoaded">
            <summary>
            True if the image data has been already loaded, false otherwise
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.BannerLoading">
            <summary>
            Is the banner currently beeing loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.BannerPath">
            <summary>
            Path to the location on the tvdb server where the image is located
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.LastUpdated">
            <summary>
            When was the banner updated the last time
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbBanner.SeriesId">
            <summary>
            Id of the series this banner belongs to
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbBannerWithThumb">
            <summary>
            This class extends the regular banner class with the ability to retrieve thumbnails of the actual images.
            
            These thumbnails are at the moment availabe for all banner types except actors
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbBannerWithThumb.LoadThumb">
            <summary>
            Load the thumb from tvdb, if there isn't already a thumb loaded,
            (an existing one will NOT be replaced)
            </summary>
            <see cref="M:TvdbLib.Data.Banner.TvdbBannerWithThumb.LoadThumb(System.Boolean)"/>
            <returns>true if the loading completed sccessfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbBannerWithThumb.LoadThumb(System.Boolean)">
            <summary>
            Load the thumb from tvdb
            </summary>
            <param name="_replaceOld">if true, an existing banner will be replaced, 
            if false the banner will only be loaded if there is no existing banner</param>
            <returns>true if the loading completed sccessfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbBannerWithThumb.LoadThumb(System.Drawing.Image)">
            <summary>
            Load thumbnail with given image
            </summary>
            <param name="_img">the image to be used forthe banner</param>
            <returns>true if the loading completed sccessfully, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbBannerWithThumb.UnloadThumb">
            <summary>
            Unloads the image and saves it to cache
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbBannerWithThumb.UnloadThumb(System.Boolean)">
            <summary>
            Unloads the image
            </summary>
            <param name="_saveToCache">should the image kept in cache</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbBannerWithThumb.ThumbLoading">
            <summary>
            Is the thumbnail currently beeing loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbBannerWithThumb.ThumbPath">
            <summary>
            Path to the fanart thumbnail
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbBannerWithThumb.ThumbImage">
            <summary>
            Image of the thumbnail
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbBannerWithThumb.IsThumbLoaded">
            <summary>
            Is the Image of the thumb already loaded
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Comparer.EpisodeComparerAired">
            <summary>
            Compare episodes according to their default episode numbers (aired)
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Comparer.EpisodeComparerDvd">
            <summary>
            Compare episodes according to their dvd episode number
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Comparer.EpisodeComparerAbsolute">
            <summary>
            Compare episodes according to their absolute episode number
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbActor">
            <summary>
            Represents an tvdb actor -> for more information see http://thetvdb.com/wiki/index.php/API:actors.xml
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbActor.SortOrder">
            <summary>
            This matches the First, Second, Third, and Don't Care options on the site, which determine if the actor is shown on the series page or not. First (SortOrder=0), Second (SortOrder=1), and Third (SortOrder=2) generally mean the actor plays a primary role in the series. Don't Care (SortOrder=3) generally means the actor plays a lesser role. In some series there are no primary actors, so all actors will have a SortOrder of 3. The actors are also listed in the report in SortOrder, followed by those with images, and then finally by Name. So using the order they show up in the file is a valid method. 
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbActor.Role">
            <summary>
            The name of the actor's character in the series. This may include multiple roles in comma-separated format. 
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbActor.Name">
            <summary>
            The actual name of the actor. 
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbActor.ActorImage">
            <summary>
            The image for the actor in this role.
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbActor.Id">
            <summary>
            A unique id per actor. At some point actors will be globally unique but for now they're just unique per series. 
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbData">
            <summary>
            TvdbData contains a list of series, a list of languages and a list of mirror
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbData.#ctor">
            <summary>
            TvdbData constructor
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbData.#ctor(System.Collections.Generic.List{TvdbLib.Data.TvdbLanguage})">
            <summary>
            TvdbData constructor
            </summary>
            <param name="_language">List of available languages</param>
        </member>
        <member name="P:TvdbLib.TvdbData.LastUpdated">
            <summary>
            When was the last time thetvdb has been checked
            for updates
            </summary>
        </member>
        <member name="P:TvdbLib.TvdbData.LanguageList">
            <summary>
            List of all available languages
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbEpisodeBanner">
            <summary>
            Represents the episode banner, which is currently only one image
            per episode (no language differentiation either) limited to a maximum 
            size of 400 x 300 
            
            further information on http://thetvdb.com/wiki/index.php/Episode_Images
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbEpisodeBanner.#ctor">
            <summary>
            TvdbEpisodeBanner constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbEpisodeBanner.#ctor(System.Int32,System.String)">
            <summary>
            TvdbEpisodeBanner constructor
            </summary>
            <param name="_bannerPath">Path of banner</param>
            <param name="_id">Id of episode banner</param>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbFanartBanner">
            <summary>
            Fan Art is high quality artwork that is displayed in the background of 
            HTPC menus. Since fan art is displayed behind other content in most cases, 
            we place more restrictions on the formatting of the image. 
            
            The resolution is either 1920x1080 or 1280x720...
            
            More information: http://thetvdb.com/wiki/index.php/Fan_Art
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.#ctor">
            <summary>
            TvdbFanartBanner constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.#ctor(System.Int32,System.String,TvdbLib.Data.TvdbLanguage)">
            <summary>
            TvdbFanartBanner constructor
            </summary>
            <param name="_id">Id of fanart banner</param>
            <param name="_lang">Language for this banner</param>
            <param name="_path">Path of image for this banner</param>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.LoadVignette">
            <summary>
            Load the vignette from tvdb
            </summary>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.LoadVignette(System.Boolean)">
            <summary>
            Load the vignette from tvdb
            </summary>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.LoadVignette(System.Drawing.Image)">
            <summary>
            Load vignette with given image
            </summary>
            <param name="_img">Image object that should be used for this banner</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.UnloadVignette">
            <summary>
            Unloads the image and saves it to cache
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbFanartBanner.UnloadVignette(System.Boolean)">
            <summary>
            Unloads the image
            </summary>
            <param name="_saveToCache">should the image kept in cache</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.IsVignetteLoaded">
            <summary>
            Is the vignette image already loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.VignetteLoading">
            <summary>
            Is the vignette currently beeing loaded
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.VignetteImage">
            <summary>
            Vignette Image
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.Colors">
            <summary>
            These are the colors selected by the artist that match the image. The format is 3 colors separated by a pipe "|". This field has leading and trailing pipes. Each color is comma separated RGB, with each color portion being an integer from 1 to 255. So the format looks like |r,g,b|r,g,b|r,g,b|. The first color is the light accent color. The second color is the dark accent color. The third color is the neutral mid-tone color. 
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.VignettePath">
            <summary>
            Path to the fanart vignette
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.ContainsSeriesName">
            <summary>
            Does the image contain the series name
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.Color3">
            <summary>
            Color 3 (see Colors property)
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.Color2">
            <summary>
            Color 2 (see Colors property)
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.Color1">
            <summary>
            Color 1 (see Colors property)
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbFanartBanner.Resolution">
            <summary>
            Resolution of the fanart
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbPosterBanner">
            <summary>
            Newest addition to the graphical section. Like the name says it has poster
            format (680px x 1000px) and is not smaller than 500 kb
            
            More information at http://thetvdb.com/wiki/index.php/Posters
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbPosterBanner.#ctor(System.Int32,System.String,TvdbLib.Data.TvdbLanguage)">
            <summary>
            TvdbPosterBanner constructor
            </summary>
            <param name="_id">Id of fanart banner</param>
            <param name="_lang">Language for this banner</param>
            <param name="_path">Path of image for this banner</param>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbPosterBanner.#ctor">
            <summary>
            TvdbPosterBanner constructor
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbPosterBanner.Resolution">
            <summary>
            Resolution of the Poster banner
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbSeasonBanner">
            <summary>
            Season bannners for each season of a series come in poster format (400 x 578) and wide format(758 x 140)
            - Wide format: http://thetvdb.com/wiki/index.php/Wide_Season_Banners
            - Poster format: http://thetvdb.com/wiki/index.php/Season_Banners
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbSeasonBanner.Season">
            <summary>
            Season of the banner
            </summary>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbSeasonBanner.BannerType">
            <summary>
            Type of the banner
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbSeasonBanner.Type">
            <summary>
            Type of the season banner
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeasonBanner.Type.season">
            <summary>
            Season banner (poster format)
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeasonBanner.Type.seasonwide">
            <summary>
            Wide season banner (banner format)
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeasonBanner.Type.none">
            <summary>
            no format specified
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbSeriesBanner">
            <summary>
            Graphical representation of a series, tpyes are text, graphical or blank
            - Graphical Banners are defined as having a graphical/logo version of the series name 
            - Text Banners generally use Arial Bold font, 27pt as the text 
            - The main requirement for blank banners is they should be blank on the left side of the banner as 
              that is where the auto-generated text will be placed
              
            More information on http://thetvdb.com/wiki/index.php/Series_Banners
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbSeriesBanner.#ctor">
            <summary>
            TvdbSeriesBanner constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Data.Banner.TvdbSeriesBanner.#ctor(System.Int32,System.String,TvdbLib.Data.TvdbLanguage,TvdbLib.Data.Banner.TvdbSeriesBanner.Type)">
            <summary>
            TvdbSeriesBanner constructor
            </summary>
            <param name="_id">Id of banner</param>
            <param name="_path">Path of banner image</param>
            <param name="_lang">Language of this banner</param>
            <param name="_type">Banner type (text, graphical, blank, none)</param>
        </member>
        <member name="P:TvdbLib.Data.Banner.TvdbSeriesBanner.BannerType">
            <summary>
            Banner type of the series banner
            </summary>
        </member>
        <member name="T:TvdbLib.Data.Banner.TvdbSeriesBanner.Type">
            <summary>
            Type of the series banner
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeriesBanner.Type.text">
            <summary>
            Banners contains a text of the seriesname
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeriesBanner.Type.graphical">
            <summary>
            Banner containing a graphical representation of the seriesname
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeriesBanner.Type.blank">
            <summary>
            Banner containing a free space on the left side to place your own series description
            </summary>
        </member>
        <member name="F:TvdbLib.Data.Banner.TvdbSeriesBanner.Type.none">
            <summary>
            Nothing specified
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbCacheNotInitialisedException">
            <summary>
            A function has been called that needs an initialised cache but the InitCache function
            hasn't been called yet
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbCacheNotInitialisedException.#ctor(System.String)">
            <summary>
            TvdbCacheNotInitialisedException constructor
            </summary>
            <param name="_msg">Message</param>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbCacheNotInitialisedException.#ctor">
            <summary>
            TvdbCacheNotInitialisedException constructor
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbDownloader">
            <summary>
            TvdbDownloader allows simple downloading of all informations stored
            on http://thetvdb.com. Unlike the class Tvdb TvdbDownloader doesn't
            include any logic like caching.
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.#ctor(System.String)">
            <summary>
            TvdbDownloader constructor
            </summary>
            <param name="_apiKey">The api key used for downloading data from thetvdb -> see http://thetvdb.com/wiki/index.php/Programmers_API</param>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadEpisodes(System.Int32,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Download the episodes for the given series
            </summary>
            <param name="_seriesId">the id of the series</param>
            <param name="_language">the language in which the episodes should be downloaded</param>
            <returns>An episode object or null if no episodes could be found</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadBanners(System.Int32)">
            <summary>
            <para>Download all available banners (only a list of available banners, not the actual images!)for the specified series.</para>
            <para>You can load the actual images by calling LoadBanner() (or LoadThumb(), LoadVignette()) on the banner object</para>
            </summary>
            <param name="_seriesId">Id of series</param>
            <returns>List of all banners for the given series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadSeries(System.Int32,TvdbLib.Data.TvdbLanguage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Download series from tvdb (specified by series id and language)</para>
            </summary>
            <param name="_seriesId">id of series</param>
            <param name="_language">language of series</param>
            <param name="_loadEpisodes">load episodes</param>
            <param name="_loadActors">load actors</param>
            <param name="_loadBanners">load banners</param>
            <returns>The series object or null if the series couldn't be found</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadSeriesZipped(System.Int32,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Download the series in the given language
            </summary>
            <param name="_seriesId">id of series</param>
            <param name="_language">language of series</param>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
            <returns>the series object</returns>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadEpisode(System.Int32,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Download the given episode from tvdb
            </summary>
            <param name="_episodeId">Id of episode</param>
            <param name="_language">Language in which the episode should be downloaded</param>
            <returns>The episode object</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadEpisode(System.Int32,System.Int32,System.Int32,TvdbLib.Data.TvdbEpisode.EpisodeOrdering,TvdbLib.Data.TvdbLanguage)">
            <summary>
            <para>Download the episode (specified by series id, season number, episode number, language and episode order) from http://thetvdb.com.</para>
            <para>It is possible to retrieve episodes by aired order (aka default order), DVD order and absolute order. For a detailled description of these
            options see: http://thetvdb.com/wiki/index.php/Category:Episodes</para>
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_seasonNr">season nr</param>
            <param name="_episodeNr">episode nr</param>
            <param name="_language">language</param>
            <param name="_order">order</param>
            <returns>The episode object or null if the episode could't be found</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadEpisode(System.Int32,System.DateTime,TvdbLib.Data.TvdbLanguage)">
            <summary>
            Download the episode specified from http://thetvdb.com
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_airDate">when did the episode air</param>
            <param name="_language">language</param>
            <returns>Episode</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadUserPreferredLanguage(System.String)">
            <summary>
            Download the preferred language of the user.
            </summary>
            <param name="_userId">Id of user</param>
            <returns>The preferred language for this user as set on http://thetvdb.com</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadUserFavoriteList(System.String)">
            <summary>
            Download the user favorite list
            </summary>
            <param name="_userId">Id of user (register at http://thetvdb.com to get a user id)</param>
            <returns>Favorite list for specified user</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadUserFavoriteList(System.String,TvdbLib.Util.UserFavouriteAction,System.Int32)">
            <summary>
            Download the user favorite list
            </summary>
            <param name="_userId">Id of user</param>
            <param name="_type">Type of action</param>
            <param name="_seriesId">id of series</param>
            <returns>List of user favorites</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">The tvdb database is unavailable</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadUpdate(System.Collections.Generic.List{TvdbLib.Data.TvdbSeries}@,System.Collections.Generic.List{TvdbLib.Data.TvdbEpisode}@,System.Collections.Generic.List{TvdbLib.Data.TvdbBanner}@,System.Int32,System.Boolean)">
            <summary>
            Download an Update
            </summary>
            <param name="_updateSeries">updated series to return</param>
            <param name="_updateEpisodes">updated episodes to return</param>
            <param name="_updateBanners">updated banners to return</param>
            <param name="_interval">interval to download (0=day, 1=week, 2=month)</param>
            <param name="_zipped">use zip</param>
            <returns>Time of the update</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadUpdate(System.Collections.Generic.List{TvdbLib.Data.TvdbSeries}@,System.Collections.Generic.List{TvdbLib.Data.TvdbEpisode}@,System.Collections.Generic.List{TvdbLib.Data.TvdbBanner}@,TvdbLib.Util.UpdateInterval,System.Boolean)">
            <summary>
            Download an Update
            </summary>
            <param name="_updateSeries">updated series to return</param>
            <param name="_updateEpisodes">updated episodes to return</param>
            <param name="_updateBanners">updated banners to return</param>
            <param name="_interval">interval to download</param>
            <param name="_zipped">use zip</param>
            <returns>Time of the update</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadLanguages">
            <summary>
            Download list available languages.
            </summary>
            <returns>A list of TvdbLanguage objects</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbContentNotFoundException">The episode/series/banner couldn't be located on the tvdb server.</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadSearchResults(System.String)">
            <summary>
            Download search results for a series search
            </summary>
            <param name="_name">name of the series</param>
            <returns>List of possible matches for the search</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">The stored api key is invalid</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.RateSeries(System.String,System.Int32,System.Int32)">
            <summary>
            Make the request for rating a series
            </summary>
            <param name="_userId">The id of the user</param>
            <param name="_seriesId">The id of the series</param>
            <param name="_rating">The rating for this series</param>
            <returns>A double value with the current rating for this series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.RateEpisode(System.String,System.Int32,System.Int32)">
            <summary>
            Make the request for rating an episode
            </summary>
            <param name="_userId">The id of the user</param>
            <param name="_episodeId">The id of the episode</param>
            <param name="_rating">The rating for this series</param>
            <returns>A double value with the current rating for this series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadSeriesRating(System.String,System.Int32)">
            <summary>
            Download the series rating without rating the item.
            </summary>
            <param name="_userId">id of user</param>
            <param name="_seriesId">id of series</param>
            <returns>Current rating for the series</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadEpisodeRating(System.String,System.Int32)">
            <summary>
            Download the episode rating without rating
            </summary>
            <param name="_userId">id of the user</param>
            <param name="_episodeId">id of the episode</param>
            <returns>Current rating of this episode</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadActors(System.Int32)">
            <summary>
            Download the list of actors
            </summary>
            <param name="_seriesId">Id of series</param>
            <returns>List of actors for the given series</returns>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadAllSeriesRatings(System.String)">
            <summary>
            Gets all series this user has already ratet
            </summary>
            <returns>All series ratings the user has made so far</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="M:TvdbLib.TvdbDownloader.DownloadRatingsForSeries(System.String,System.Int32)">
            <summary>
            Download the user rating for the given series (episodes and series itself)
            </summary>
            <param name="_userId">Id of user</param>
            <param name="_seriesId">Id of series</param>
            <returns>Dictionary of all ratings</returns>
            <exception cref="T:TvdbLib.Exceptions.TvdbInvalidXmlException"><para>Exception is thrown when there was an error parsing the xml files. </para>
                                                      <para>Feel free to post a detailed description of this issue on http://code.google.com/p/tvdblib 
                                                      or http://forums.thetvdb.com/</para></exception>  
            <exception cref="T:TvdbLib.Exceptions.TvdbUserNotFoundException">The user doesn't exist</exception>
            <exception cref="T:TvdbLib.Exceptions.TvdbNotAvailableException">Exception is thrown when thetvdb isn't available.</exception>
        </member>
        <member name="T:TvdbLib.Data.TvdbRating">
            <summary>
            Represents a rating entry from thetvdb
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbRating.RatingItemType">
            <summary>
            Which item type is this rating for
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbRating.CommunityRating">
            <summary>
            Community Rating is a double value from 0 to 10 and is the mean value of all user ratings for this item
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbRating.UserRating">
            <summary>
            The rating from this user
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbRating.ItemType">
            <summary>
            Enum with all items on thetvdb that can be rated
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbRating.ItemType.Series">
            <summary>
            Item is a series
            </summary>
        </member>
        <member name="F:TvdbLib.Data.TvdbRating.ItemType.Episode">
            <summary>
            Item is an episode
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbSearchResult">
            <summary>
            Class representing the result of a tvdb name query -> for further information
            visit http://thetvdb.com/wiki/index.php/API:GetSeries
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbSearchResult.#ctor">
            <summary>
            TvdbSearchResult constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbSearchResult.#ctor(System.Int32)">
            <summary>
            TvdbSearchResult constructor
            </summary>
            <param name="_id">Id of series</param>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.Id">
            <summary>
            Id of the returned series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.SeriesName">
            <summary>
            Name of the returned series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.FirstAired">
            <summary>
            When was the returned series aired first
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.Language">
            <summary>
            Language of the returned series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.Overview">
            <summary>
            Overview of the returned series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.Banner">
            <summary>
            Banner of the returned series
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbSearchResult.ImdbId">
            <summary>
            Imdb id of the returned series
            </summary>
        </member>
        <member name="T:TvdbLib.Data.TvdbUser">
            <summary>
            Class that holds all user information
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbUser.#ctor(System.String,System.String)">
            <summary>
            TvdbUser constructor
            </summary>
            <param name="_username">Name of the user, can be choosen freely</param>
            <param name="_userIdentifier">User identifier from http://thetvdb.com</param>
        </member>
        <member name="M:TvdbLib.Data.TvdbUser.#ctor">
            <summary>
            TvdbUser constructor
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbUser.UserPreferredLanguage">
            <summary>
            Preferred language of the user
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbUser.UserIdentifier">
            <summary>
            This is the unique identifier assigned to every user. They can access this value by visiting the account settings page on the site. This is a 16 character alphanumeric string, but you should program your applications to handle id strings up to 32 characters in length. 
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbUser.UserName">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbUser.UserFavorites">
            <summary>
            List of user favorites
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbContentNotFoundException">
            <summary>
            Exception that is thrown when a nonexistent content is requested
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbContentNotFoundException.#ctor(System.String)">
            <summary>
            TvdbInvalidAPIKeyException constructor
            </summary>
            <param name="_text">Message</param>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbContentNotFoundException.#ctor">
            <summary>
            TvdbInvalidAPIKeyException constructor
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbInvalidApiKeyException">
            <summary>
            Exception thrown when a request is made which requires a valid
            api key but none is set
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbInvalidApiKeyException.#ctor(System.String)">
            <summary>
            TvdbInvalidAPIKeyException constructor
            </summary>
            <param name="_text">Message</param>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbInvalidApiKeyException.#ctor">
            <summary>
            TvdbInvalidAPIKeyException constructor
            </summary>
        </member>
        <member name="F:TvdbLib.Log.CURRENT_LEVEL">
            <summary>
            The loglevel that is currently used
            </summary>
        </member>
        <member name="M:TvdbLib.Log.Debug(System.String)">
            <summary>
            Logs the message at level Debug
            </summary>
            <param name="_logMessage">Message to log</param>
        </member>
        <member name="M:TvdbLib.Log.Debug(System.String,System.Exception)">
            <summary>
            Logs the message at level Debug
            </summary>
            <param name="_logMessage">Message to log</param>
            <param name="_ex">Exception to log</param>
        </member>
        <member name="M:TvdbLib.Log.Info(System.String)">
            <summary>
            Logs the message at level info
            </summary>
            <param name="_logMessage">Message to log</param>
        </member>
        <member name="M:TvdbLib.Log.Info(System.String,System.Exception)">
            <summary>
            Logs the message at level info
            </summary>
            <param name="_logMessage">Message to log</param>
            <param name="_ex">Exception to log</param>
        </member>
        <member name="M:TvdbLib.Log.Warn(System.String)">
            <summary>
            Logs the message at level Warn
            </summary>
            <param name="_logMessage">Message to log</param>
        </member>
        <member name="M:TvdbLib.Log.Warn(System.String,System.Exception)">
            <summary>
            Logs the message at level Warn
            </summary>
            <param name="_logMessage">Message to log</param>
            <param name="_ex">Exception to log</param>
        </member>
        <member name="M:TvdbLib.Log.Error(System.String)">
            <summary>
            Logs the message at level Error
            </summary>
            <param name="_logMessage">Message to log</param>
        </member>
        <member name="M:TvdbLib.Log.Error(System.String,System.Exception)">
            <summary>
            Logs the message at level Error
            </summary>
            <param name="_logMessage">Message to log</param>
            <param name="_ex">Exception to log</param>
        </member>
        <member name="M:TvdbLib.Log.Fatal(System.String)">
            <summary>
            Logs the message at level Fatal
            </summary>
            <param name="_logMessage">Message to log</param>
        </member>
        <member name="M:TvdbLib.Log.Fatal(System.String,System.Exception)">
            <summary>
            Logs the message at level Fatal
            </summary>
            <param name="_logMessage">Message to log</param>
            <param name="_ex">Exception to log</param>
        </member>
        <member name="M:TvdbLib.Log.Debug(System.String,TvdbLib.Log.LOGLEVEL)">
            <summary>
            Logs the message at the given level
            </summary>
            <param name="_logMessage">Message to log</param>
            <param name="_level">Level to log</param>
        </member>
        <member name="T:TvdbLib.Log.LOGLEVEL">
            <summary>
            Loglevel
            </summary>
        </member>
        <member name="T:TvdbLib.TvdbLinkCreator">
            <summary>
            Information on server structure and mirrors of tvdb
            
            <![CDATA[
            <mirrorpath>/api/<apikey>/
            |---- mirrors.xml
            |---- languages.xml
            |
            |---- series/
            |     |---- <seriesid>/
            |           |---- <language>.xml  (Base Series Record)
            |           |---- banners.xml  (All banners related to this series)
            |           |
            |           |---- all/
            |           |     |---- <language>.xml  (Full Series Record)
            |           |     |---- <language>.zip  (Zipped version of Full Series Record and banners.xml)
            |           |
            |           |---- default/  (sorts using the default ordering method)
            |           |     |---- <season#>/<episode#>/
            |           |           |---- <language>.xml  (Base Episode Record)
            |           |
            |           |---- dvd/  (sorts using the dvd ordering method)
            |           |     |---- <season#>/<episode#>/
            |           |           |---- <language>.xml  (Base Episode Record)
            |           |
            |           |---- absolute/  (sorts using the absolute ordering method)
            |                 |---- <absolute#>/
            |                   |---- <language>.xml  (Base Episode Record)
            |
            |---- episodes
            |     |---- <episodeid>/  (will return en.xml by default)
            |           |---- <language>.xml  (Base Episode Record)
            |
            |---- (updates)
                  |---- s<timeframe>.xml
                  |---- updates_<timeframe>.zip
            ]]>
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbLinkCreator.BASE_SERVER">
            <summary>
            Base server where all operations start
            </summary>
        </member>
        <member name="F:TvdbLib.TvdbLinkCreator.LANG_PATH">
            <summary>
            Path of file where we get the available languages
            </summary>
        </member>
        <member name="M:TvdbLib.TvdbLinkCreator.CreateUserFavouriteLink(System.String,TvdbLib.Util.UserFavouriteAction,System.Int32)">
            <summary>
            Creates link which (depending on params) gets user favorites, adds a series to user
            favorites or removes a series from the favorite lis
            </summary>
            <param name="_identifier"></param>
            <param name="_type"></param>
            <param name="_seriesId"></param>
            <returns>Link</returns>
        </member>
        <member name="M:TvdbLib.TvdbLinkCreator.CreateUserFavouriteLink(System.String)">
            <summary>
            Creates link which only retrieves the user favourites
            </summary>
            <param name="_identifier"></param>
            <returns>Link</returns>
        </member>
        <member name="M:TvdbLib.TvdbLinkCreator.CreateActorLink(System.Int32,System.String)">
            <summary>
            Create link to get actor info
            </summary>
            <param name="_seriesId">series id</param>
            <param name="_apiKey">api key</param>
            <returns>Link</returns>
        </member>
        <member name="M:TvdbLib.TvdbLinkCreator.CreateAllSeriesRatingsLink(System.String,System.String)">
            <summary>
            create a link to all series rated by the user
            </summary>
            <param name="_apiKey">api key</param>
            <param name="_userIdentifier">user identifier</param>
            <returns>Link</returns>
        </member>
        <member name="M:TvdbLib.TvdbLinkCreator.CreateSeriesRatingsLink(System.String,System.String,System.Int32)">
            <summary>
            create a link to all items rated by the user for this series
            </summary>
            <param name="_apiKey">api key</param>
            <param name="_userIdentifier">user identifier</param>
            <param name="_seriesId">id of the series</param>
            <returns>Link</returns>
        </member>
        <member name="T:TvdbLib.Data.TvdbMirror">
            <summary>
            Baseclass for a tvdb mirror. A mirror is defined in the tvdb xml by:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8" ?>
            <Mirrors>
             <Mirror>
               <id>1</id>
               <mirrorpath>http://thetvdb.com</mirrorpath>
               <typemask>7</typemask>
             </Mirror>
            </Mirrors>
            ]]>
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbMirror.#ctor">
            <summary>
            TvdbMirror constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Data.TvdbMirror.#ctor(System.Int32,System.Uri,System.Int32)">
            <summary>
            TvdbMirror constructor
            </summary>
            <param name="_id">Id of the mirror</param>
            <param name="_mirror">Url to the mirror</param>
            <param name="_typeMask">Typemask of the mirror, see property "TypeMask"</param>
        </member>
        <member name="P:TvdbLib.Data.TvdbMirror.Id">
            <summary>
            Id of the mirror
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbMirror.TypeMask">
            <summary>
            The value of typemask is the sum of whichever file types that mirror holds:
            1 xml files
            2 banner files
            4 zip files
            So, a mirror that has a typemask of 5 would hold XML and ZIP files, but no banner files. 
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbMirror.OffersImages">
            <summary>
             Returns true if the mirror offers images for downloading, false otherwise
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbMirror.OffersXml">
            <summary>
             Returns true if the mirror offers xml files for downloading, false otherwise
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbMirror.OffersZip">
            <summary>
             Returns true if the mirror offers zipped downloads, false otherwise
            </summary>
        </member>
        <member name="P:TvdbLib.Data.TvdbMirror.MirrorPath">
            <summary>
            Path to the mirror
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbNotAvailableException">
            <summary>
            Exception that is thrown if http://thetvdb.com seems to be unavailable
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbNotAvailableException.#ctor(System.String)">
            <summary>
            TvdbNotAvailableException constructor
            </summary>
            <param name="_text">Message</param>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbNotAvailableException.#ctor">
            <summary>
            TvdbNotAvailableException constructor
            </summary>
        </member>
        <member name="T:TvdbLib.Exceptions.TvdbUserNotFoundException">
            <summary>
            Exception thrown when no user has been found
            </summary>
        </member>
        <member name="M:TvdbLib.Exceptions.TvdbUserNotFoundException.#ctor(System.String)">
            <summary>
            TvdbUserNotFoundException constructor
            </summary>
            <param name="_text">Message</param>
        </member>
        <member name="T:TvdbLib.Xml.TvdbXmlWriter">
            <summary>
            Writes tvdb data to xml files
            </summary>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.#ctor">
            <summary>
            TvdbXmlWriter constructor
            </summary>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.CreateLanguageFile(System.Collections.Generic.List{TvdbLib.Data.TvdbLanguage})">
            <summary>
            Create the file contents
            </summary>
            <param name="_languages">List of languages to store</param>
            <returns></returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.WriteLanguageFile(System.Collections.Generic.List{TvdbLib.Data.TvdbLanguage},System.String)">
            <summary>
            Write the list of languages to file
            </summary>
            <param name="_languages">List of languages to store</param>
            <param name="_path">Path on disk</param>
            <returns>true if the file could be stored, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.CreateMirrorList(System.Collections.Generic.List{TvdbLib.Data.TvdbMirror})">
            <summary>
            Create the file content for a list of mirrors
            </summary>
            <param name="_mirrors">List of mirrors to store</param>
            <returns>xml content</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.WriteMirrorFile(System.Collections.Generic.List{TvdbLib.Data.TvdbMirror},System.String)">
            <summary>
            Write the xml file for the mirrors to file
            </summary>
            <param name="_mirrors">List of mirrors to store</param>
            <param name="_path">Path on disk</param>
            <returns>true if the file could be stored, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.CreateActorList(System.Collections.Generic.List{TvdbLib.Data.TvdbActor})">
            <summary>
            Create the file content for a list of actors
            </summary>
            <param name="_actors">List of actors to store</param>
            <returns>xml content</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.WriteActorFile(System.Collections.Generic.List{TvdbLib.Data.TvdbActor},System.String)">
            <summary>
            Write the xml file for the actors to file
            </summary>
            <param name="_actors">List of actors to store</param>
            <param name="_path">Path on disk</param>
            <returns>true if the file could be stored, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.CreateSeriesContent(TvdbLib.Data.TvdbSeries)">
            <summary>
            Create the series content
            </summary>
            <param name="_series">Series to store</param>
            <returns>xml content</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.WriteSeriesContent(TvdbLib.Data.TvdbSeries,System.String)">
            <summary>
            Write the series content to file
            </summary>
            <param name="_series">Series to store</param>
            <param name="_path">Path on disk</param>
            <returns>true if the file could be stored, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.CreateSeriesBannerContent(System.Collections.Generic.List{TvdbLib.Data.TvdbBanner})">
            <summary>
            Create the series banner content
            </summary>
            <param name="_bannerList">List of banners to store</param>
            <returns>xml content</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.WriteSeriesBannerContent(System.Collections.Generic.List{TvdbLib.Data.TvdbBanner},System.String)">
            <summary>
            Write the series banner contents to xml file
            </summary>
            <param name="_bannerList">Bannerlist to store</param>
            <param name="_path">Path on disk</param>
            <returns>true if the file could be stored, false otherwise</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.CreateUserData(TvdbLib.Data.TvdbUser)">
            <summary>
            Create the xml content to save a TvdbUser to file
            </summary>
            <param name="_user">User to store</param>
            <returns>xml content</returns>
        </member>
        <member name="M:TvdbLib.Xml.TvdbXmlWriter.WriteUserData(TvdbLib.Data.TvdbUser,System.String)">
            <summary>
            Write the user data to file
            </summary>
            <param name="_user">User to store</param>
            <param name="_path">Path on disk</param>
            <returns>true if the file could be stored, false otherwise</returns>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:TvdbLib.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>
            <param name="buffer">The buffer containing data to update the crc with.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.SetStrategy(TvdbLib.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(TvdbLib.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:TvdbLib.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(TvdbLib.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(TvdbLib.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,TvdbLib.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,TvdbLib.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given <paramref name="password"/>.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(TvdbLib.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the GZipInputStream.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,TvdbLib.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,TvdbLib.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count">The number of bytes</paramref> to skip is less than or equal to zero.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name="buffer">
            The array to read and decompress data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required</remarks>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RC4 has been used for encryption.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.
            </remarks>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:TvdbLib.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable <see cref="T:TvdbLib.SharpZipLib.Zip.GeneralBitFlags">general purpose bits flags</see></param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:TvdbLib.SharpZipLib.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:TvdbLib.ICSharpCode.SharpZipLib.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,TvdbLib.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value of true if Zip64 extensions have been forced on; false if not.</returns>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
            <returns>An <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets a string representation of this ZipEntry.
            </summary>
            <returns>A readable textual representation of this <see cref="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry"/></returns>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported(TvdbLib.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">The name to clean</param>
            <returns>The 'cleaned' name.</returns>
            <remarks>
            The Zip name transform class is more flexible.
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            <br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-10: Unused or reserved<br/>
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br/>
            Bit 12-15: Unused or reserved<br/>
            </remarks>
            <seealso cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText"></seealso>
            <seealso cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted"></seealso>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
            <remarks>This is only valid when the entry is part of a</remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
            <seealso cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress"></seealso>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating wether this entry can be decompressed by the library.
            </summary>
            <remarks>This is based on the <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value of true if a local header requires Zip64 extensions; false if not.</value>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime value.
            </summary>
            <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <remarks>
            The <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the  class, or <see cref="M:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
            <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the ZipFile class.
            The <see cref="T:TvdbLib.SharpZipLib.Zip.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ITaggedData">
            <summary>
            ExtraData tagged value interface.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the contents of this instance from the data passed.
            </summary>
            <param name="data">The data to extract contents from.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ITaggedData.GetData">
            <summary>
            Get the data representing this instance.
            </summary>
            <returns>Returns the data for this instance.</returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ITaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.RawTaggedData">
            <summary>
            A raw binary tagged value
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.RawTaggedData.#ctor(System.Int16)">
            <summary>
            Initialise a new instance.
            </summary>
            <param name="tag">The tag ID.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="offset">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.RawTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.RawTaggedData.tag_">
            <summary>
            The tag ID for this instance.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.RawTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.RawTaggedData.Data">
            <summary>
            Get /set the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ExtendedUnixData">
            <summary>
            Class representing extended unix date time values.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.TagID">
            <summary>
            Get the ID
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.ModificationTime">
            <summary>
            Get /set the Modification Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.AccessTime">
            <summary>
            Get / set the Access Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.CreateTime">
            <summary>
            Get / Set the Create Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.Include">
            <summary>
            Get/set the <see cref="T:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.Flags">
            <summary>
            Flags indicate which values are included in this instance.
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.Flags.ModificationTime">
            <summary>
            The modification time is included
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.Flags.AccessTime">
            <summary>
            The access time is included
            </summary>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ExtendedUnixData.Flags.CreateTime">
            <summary>
            The create time is included.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.NTTaggedData">
            <summary>
            Class handling NT date time values.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.NTTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.NTTaggedData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.NTTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.NTTaggedData.LastModificationTime">
            <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.NTTaggedData.CreateTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">create time</see>
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.NTTaggedData.LastAccessTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ITaggedDataFactory">
            <summary>
            A factory that creates <see cref="T:TvdbLib.SharpZipLib.Zip.ITaggedData">tagged data</see> instances.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ITaggedDataFactory.Create(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get data for a specific tag value.
            </summary>
            <param name="tag">The tag ID to find.</param>
            <param name="data">The data to search.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
            <returns>The located <see cref="T:TvdbLib.SharpZipLib.Zip.ITaggedData">value found</see>, or null if not found.</returns>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ZipExtraData">
            
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.GetData(System.Int16)">
            <summary>
            Get the <see cref="T:TvdbLib.SharpZipLib.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>Returns a <see cref="T:TvdbLib.SharpZipLib.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddEntry(TvdbLib.SharpZipLib.Zip.ITaggedData)">
            <summary>
            Add a new entry to extra data.
            </summary>
            <param name="taggedData">The <see cref="T:TvdbLib.SharpZipLib.Zip.ITaggedData"/> value to add.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddEntry(TvdbLib.SharpZipLib.Zip.ITaggedData)"/>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only valid if <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.</remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially the result will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadInt"/>, <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadShort"/> and <see cref="M:TvdbLib.SharpZipLib.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.DescriptorData">
            <summary>
            Holds data pertinent to a data descriptor.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.DescriptorData.CompressedSize">
            <summary>
            Get /set the compressed size of data.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.DescriptorData.Size">
            <summary>
            Get / set the uncompressed size of data
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.DescriptorData.Crc">
            <summary>
            Get /set the crc value.
            </summary>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:TvdbLib.SharpZipLib.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            The underlying stream is closed only if <see cref="P:TvdbLib.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner"/> is true.
            </remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Locates a block with the desired <paramref name="signature"/>.
            </summary>
            <param name="signature">The signature to find.</param>
            <param name="endLocation">Location, marking the end of block.</param>
            <param name="minimumBlockSize">Minimum size of the block.</param>
            <param name="maximumVariableData">The maximum variable data.</param>
            <returns>Eeturns the offset of the first byte after the signature; -1 if not found</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.WriteDataDescriptor(TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Write a data descriptor.
            </summary>
            <param name="entry">The entry to write a descriptor for.</param>
            <returns>Returns the number of descriptor bytes written.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipHelperStream.ReadDataDescriptor(System.Boolean,TvdbLib.SharpZipLib.Zip.DescriptorData)">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
            <param name="zip64">if set to <c>true</c> [zip64].</param>
            <param name="data">The data to fill in.</param>
            <returns>Returns the number of bytes read in the descriptor.</returns>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			while ((theEntry = s.GetNextEntry()) != null) {
             				int size = 2048;
             				byte[] data = new byte[2048];
            
             				Console.Write("Show contents (y/n) ?");
             				if (Console.ReadLine() == "y") {
             					while (true) {
             						size = s.Read(data, 0, data.Length);
             						if (size > 0) {
             							Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             						} else {
             							break;
             						}
             					}
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="F:TvdbLib.SharpZipLib.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:TvdbLib.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:TvdbLib.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:TvdbLib.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:TvdbLib.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
            <value>A password for all encrypted <see cref="T:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry">entries </see> in this <see cref="T:TvdbLib.SharpZipLib.Zip.ZipInputStream"/></value>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:TvdbLib.ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:TvdbLib.SharpZipLib.Zip.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:TvdbLib.SharpZipLib.Zip.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="T:TvdbLib.SharpZipLib.Zip.ZipInputStream.ReadDataHandler">
            <summary>
            Delegate for reading bytes from a stream. 
            </summary>
        </member>
    </members>
</doc>
